<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sht_PlayerStaff</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-1</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Initialize Attributes
putAway = false;
Charge = 0;
maxCharge = 3;
manaCost = 3;
switch obj_Player.dir
{
    case -1: dir = 180; break;
    case 1: dir = 0; break;
}
image_angle = dir;
image_index = 0;
image_speed = 0;
effectRadius = 0;
Direct = false;
AoE = false;
alarm[1] = room_speed * 0.5;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Set Target and Direction
TargetX = mouse_x;
TargetY = mouse_y;
dir = point_direction(obj_Player.x, obj_Player.y, TargetX, TargetY) + 90;
aSin = sin(dir * pi / 180);
aCos = cos(dir * pi / 180);
aSinEdge = effectRadius * aSin;
aCosEdge = effectRadius * aCos;
x = obj_Player.x + (8 * sin(180 * pi / 180));
y = obj_Player.y + (8 * cos(180 * pi / 180));
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Increase Charge
if obj_GUI.khAttack
{
    if not putAway
    {
        if obj_Player.statMana &gt;= manaCost
        {
            if Charge &lt; maxCharge
            {
                Charge += 1;
                Charge = max(0, min(Charge, maxCharge));
            }
        }
        else
        {
            putAway = true;
            alarm[0] = room_speed * 0.1;
        }
    }
}
else
{
    if obj_Player.statMana &gt;= manaCost and Charge = maxCharge
    {
        decrease_mana(obj_Player, manaCost);
        putAway = true;
        alarm[0] = room_speed * 0.2;
        alarm[2] = 1;
    }
    else
    {
        putAway = true;
        alarm[0] = 1;
    }
}

alarm[1] = room_speed * 0.5;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Destroy Instance
instance_destroy();
obj_Player.Attacking = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Change Position
if instance_exists(obj_Player)
{
    dir = point_direction(obj_Player.x, obj_Player.y, TargetX, TargetY) + 90;
    image_angle = dir - 90;
    aSin = sin(dir * pi / 180);
    aCos = cos(dir * pi / 180);
    x = obj_Player.x + (12 * aSin);
    y = obj_Player.y + (12 * aCos);
    aSinEdge = effectRadius * aSin;
    aCosEdge = effectRadius * aCos;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw Target
if Direct
{
    switch AoE
    {
        case true: draw_line_colour(x, y, TargetX - aSinEdge, TargetY - aCosEdge, c_red, c_red); break;
        case false: draw_line_colour(x, y, TargetX, TargetY, c_red, c_red); break;
    }
}
if AoE
{
    draw_sprite(sht_StaffAoE, floor(log2(effectRadius)) - 2, TargetX, TargetY);
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw Self
draw_self();
if not putAway
{
    draw_sprite_ext(ani_PlayerStaff_charge, Charge, x, y, 1, 1, image_angle, c_white, Charge / maxCharge);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
