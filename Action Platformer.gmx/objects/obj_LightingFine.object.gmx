<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_Lighting</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-999999</depth>
  <persistent>0</persistent>
  <parentName>par_HUDObject</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Initialize Variables
maxLightLevel = 3;
init = false;
w = room_width / TileDimensions;
h = room_height / TileDimensions;
lightGrid = ds_grid_create(w, h);
ds_grid_clear(lightGrid, 0);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Initialize Lighting
if obj_Controller.MapType = "Platform"
{
    if not init
    {
        show_debug_message("[DBG]: Initializing Lighting...")
        for (yy = 0; yy &lt; room_height / TileDimensions; yy += 1)
        {
            for (xx = 0; xx &lt; room_width / TileDimensions; xx += 1)
            {
                var mx = (xx + 0.5);
                var my = (yy + 0.5);
                if place_meeting(mx * TileDimensions, my * TileDimensions, obj_Block)
                {
                    show_debug_message("[DBG]: Block at (" + string(xx * TileDimensions) + ", " + string(yy * TileDimensions) + ").");
                    for (i = 1; i &lt; maxLightLevel + 1; i += 1)
                    {
                        blocked = true;
                        for (ii = 1; ii &lt; i + 1; ii += 1)
                        {
                            var up = place_meeting(mx * TileDimensions, (my - ii) * TileDimensions, obj_Block);
                            var down = place_meeting(mx * TileDimensions, (my + ii) * TileDimensions, obj_Block);
                            var left = place_meeting((mx - ii) * TileDimensions, my * TileDimensions, obj_Block);
                            var right = place_meeting((mx + ii) * TileDimensions, my * TileDimensions, obj_Block);
                            if not (up and down and left and right)
                            {
                                blocked = false;
                            }
                        }
                        if blocked
                        {
                            ds_grid_set(lightGrid, xx, yy, i);
                            show_debug_message("[DBG]: Set the light level at (" + string(xx * TileDimensions) + ", " + string(yy * TileDimensions) + ") to " + string(i) + ".");
                        }
                    }
                }
            }
        }
        init = true;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw Light Levels
if obj_Controller.MapType = "Platform"
{
    var vx, vy, vw, vh, xx, yy;
    vx = view_xview;
    vy = view_yview;
    vw = view_wview;
    vh = view_hview;
    for (yy = floor(vy / TileDimensions) * TileDimensions; yy &lt; floor((vy + vh + 16) / TileDimensions) * TileDimensions; yy += TileDimensions)
    {
        for (xx = floor(vx / TileDimensions) * TileDimensions; xx &lt; floor((vx + vw + 16) / TileDimensions) * TileDimensions; xx += TileDimensions)
        {
            var lightLevel = ds_grid_get(lightGrid, max(0, min(xx / TileDimensions, w - 1)), max(0, min(yy / TileDimensions, h - 1)));
            if lightLevel &gt; 0
            {
                draw_set_halign(fa_center);
                draw_set_valign(fa_center);
                draw_set_alpha(lightLevel / maxLightLevel);
                draw_rectangle_colour(xx, yy, xx + TileDimensions - 1, yy + TileDimensions - 1, c_black, c_black, c_black, c_black, false);
                //draw_text_transformed(xx + (TileDimensions / 2), yy + (TileDimensions / 2), lightLevel, 0.1625, 0.1625, 0);
                draw_set_halign(fa_left);
                draw_set_valign(fa_top);
            }
        }
    }
    draw_set_alpha(1);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
