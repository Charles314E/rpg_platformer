<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_Inventory</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-1000003</depth>
  <persistent>-1</persistent>
  <parentName>par_HUDObject</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Initialize Inventory Grid
invW = 10;
invH = 8;

slotSize = 32;
slotXOffset = (view_wport[view_current] / 2) - 64;
slotYOffset = 222;
slotSprite = spr_ItemSlotLarge;

InventoryList = ds_grid_create(invW, invH);
ds_grid_clear(InventoryList, 0);
Weight = 0;
InventoryShown = false;
image_alpha = 1;

slotBackAlpha = 0;
slotBackOffset = 0;
n = 0;

slotHover = false;
tooltipShown = false;
tooltipName = "";
tooltipDescription = "";
tooltipStats = "";

sx = 0;
sy = 0;
ItemUsed = false;

alarm[0] = room_speed / 30;
alarm[1] = room_speed / 15;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Databases
dbItems = generate_item_database();
dbWeapons = generate_weapon_database();
weaponTypes = generate_weapon_types();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Get Cursor Position
if obj_Menu.MenuShown and obj_Menu.Nested and InventoryShown and obj_Menu.backAlpha &gt;= 0.5
{
    if not ItemUsed
    {
        if obj_GUI.kpLeft or obj_GUI.khLeft
        {
            sx = max(0, sx - 1);
            slotBackAlpha = 0;
            slotBackOffset = 0;
            n = 0;
            alarm[0] = room_speed / 30;
        }
        if obj_GUI.kpRight or obj_GUI.khRight
        {
            sx = min(invW - 1, sx + 1);
            slotBackAlpha = 0;
            slotBackOffset = 0;
            n = 0;
            alarm[0] = room_speed / 30;
        }
        if obj_GUI.kpUp or obj_GUI.khUp
        {
            sy = max(0, sy - 1);
            slotBackAlpha = 0;
            slotBackOffset = 0;
            n = 0;
            alarm[0] = room_speed / 30;
        }
        if obj_GUI.kpDown or obj_GUI.khDown
        {
            sy = min(invH - 1, sy + 1);
            slotBackAlpha = 0;
            slotBackOffset = 0;
            n = 0;
            alarm[0] = room_speed / 30;
        }
    }
}
alarm[1] = room_speed / 5;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Create Slot Shadow
if n &lt; 16
{
    slotBackAlpha += 0.01;
    slotBackOffset += 0.25;
    n += 1;
    alarm[0] = room_speed / 30;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Create Tooltip
if InventoryShown
{
    slotHover = false;
    weaponSlotHover = false;
    for (yy = 0; yy &lt; invH; yy += 1)
    {
        slotY = slotYOffset + (yy * slotSize);
        for (xx = 0; xx &lt; invW; xx += 1)
        {
            slotX = slotXOffset + (xx * slotSize) + (xx * 4) + obj_Menu.menuOffset;
            //Query slot record and get mouse position
            var slot;
            slot = ds_grid_get(InventoryList, xx, yy);
            if slot != 0
            {
                create_item_tooltip(ds_list_find_value(slot, 0), self, slotX, slotY, slotSize, slotSize, 4, 3);
            }
        }
    }
    slotY = slotYOffset + ((invH + 1) * slotSize);
    for (i = 0; i &lt; 10; i += 1)
    {
        slotX = slotXOffset + (i * slotSize) + (i * 4) + obj_Menu.menuOffset;
        //Record items if slot is filled
        slot = ds_list_find_value(obj_WeaponSwitcher.WeaponsList, i);
        if is_string(slot)
        {
            if (create_item_tooltip(slot, self, slotX, slotY, slotSize, slotSize, 4, 3)) {
                weaponSlotHover = true;
            }
        }
    }
    if not slotHover
    {
        tooltipShown = false;
        tooltipName = "";
        tooltipDescription = "";
        tooltipStats = "";
    }
}
else
{
    tooltipShown = false;
    tooltipName = "";
    tooltipDescription = "";
    tooltipStats = "";
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Use Item
if obj_Menu.MenuShown and obj_Menu.Nested and InventoryShown and obj_Menu.backAlpha &gt;= 0.5
{
    var itemUsed = false;
    if obj_GUI.kpInteract or obj_GUI.kpAttack
    {
        itemUsed = true;
        var selectedSlot, selectedItemID, selectedItemNumber;
        selectedSlot = ds_grid_get(InventoryList, sx, sy);
        selectedItemID = ds_list_find_value(selectedSlot, 0);
        selectedItemNumber = ds_list_find_value(selectedSlot, 1);
    }
    if slotHover and obj_GUI.mbInteract
    {
        var mx;
        mx = int64((obj_GUI.cursor_x - (obj_Menu.menuOffset + slotXOffset)) / (slotSize + 4));
        if (weaponSlotHover) {
            obj_WeaponSwitcher.Weapon = mx;
        }
        else {
            var my, selectedSlot, selectedItemID, selectedItemNumber;
            my = int64((obj_GUI.cursor_y - slotYOffset) / slotSize);
            if (round(mx) == round(sx) and round(my) == round(sy)) {
                itemUsed = true;
                var selectedSlot, selectedItemID, selectedItemNumber;
                selectedSlot = ds_grid_get(InventoryList, sx, sy);
                selectedItemID = ds_list_find_value(selectedSlot, 0);
                selectedItemNumber = ds_list_find_value(selectedSlot, 1);
            }
            else {
                sx = mx;
                sy = my;
            }
        }
    }
    if itemUsed
    {
        if inventory_remove(InventoryList, selectedItemID, 1)
        {
            var wi, wt;
            show_debug_message("[ITM/0]: " + string(selectedItemID) + "-" + string(selectedItemNumber));
            wi = ds_list_find_index(dbWeapons, selectedItemID);
            if wi != -1
            {
                show_debug_message("[ITM/WPN/1]: " + string(wi));
                wt = ds_list_find_index(weaponTypes, ds_list_find_value(dbWeapons, wi + 4));
                if wt != -1
                {
                    show_debug_message("[ITM/WPN/2]: " + string(wt));
                    obj_WeaponSwitcher.WeaponsList = equip_weapon(obj_WeaponSwitcher.WeaponsList, selectedItemID, wt);
                }
            }
            else
            {
                var si;
                si = floor(ds_list_find_index(dbItems, selectedItemID) / 4);
                show_debug_message("[ITM/ITM/1]: " + string(wi));
                switch si
                {
                    case 0: obj_Player.statHealth = min(obj_Player.statMaxHealth, obj_Player.statHealth + 5);
                            break;
                    case 1: obj_Player.statHealth = min(obj_Player.statMaxHealth, obj_Player.statHealth + 20);
                            break;
                    case 2: obj_Player.statHealth = min(obj_Player.statMaxHealth, obj_Player.statHealth + 40);
                            break;
                    case 3: obj_Player.statMana = min(obj_Player.statMaxMana, obj_Player.statMana + 3);
                            break;
                    case 4: obj_Player.statMana = min(obj_Player.statMaxMana, obj_Player.statMana + 12);
                            break;
                    case 5: obj_Player.statMana = min(obj_Player.statMaxMana, obj_Player.statMana + 30);
                            break;
                    default: inventory_add(InventoryList, selectedItemID, 1);
                }
            }
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw Inventory
var xx, yy, slotX, slotY;
image_alpha = (-1 * obj_Menu.cursorAlpha) + 1;
draw_set_alpha(1);
if InventoryShown
{
    for (yy = 0; yy &lt; invH; yy += 1)
    {
        slotY = slotYOffset + (yy * slotSize);
        for (xx = 0; xx &lt; invW; xx += 1)
        {
            slotX = slotXOffset + (xx * slotSize) + (xx * 4) + obj_Menu.menuOffset;
            //Query slot record
            slot = ds_grid_get(InventoryList, xx, yy);
            //Record items if slot is filled
            if not slot = 0 
            {
                itemID = ds_list_find_value(slot, 0);
                itemNumber = ds_list_find_value(slot, 1);
                i = ds_list_find_index(dbItems, itemID);
                if i != -1
                {
                    itemSprite = ds_list_find_value(dbItems, i + 1);
                    itemSubimage = ds_list_find_value(dbItems, i + 2);
                }
                else
                {
                    i = ds_list_find_index(dbWeapons, itemID);
                    if i != -1
                    {
                        itemSprite = ds_list_find_value(dbWeapons, i + 1);
                        itemSubimage = ds_list_find_value(dbWeapons, i + 2);
                    }
                }
            }
            //Draw Back
            if sx = xx and sy = yy
            {
                draw_sprite_ext(slotSprite, 0, slotX - slotBackOffset, slotY + slotBackOffset, 1, 1, 0, c_white, image_alpha * slotBackAlpha * 2);
                draw_set_alpha(min(0.75, image_alpha * slotBackAlpha * 4));
                draw_rectangle_colour(slotX + 3, slotY + 2, slotX + slotSize - 4, slotY + slotSize - 3, c_black, c_black, c_black, c_black, false);
                draw_set_alpha(1);
                if not slot = 0
                {
                    draw_sprite_ext(itemSprite, itemSubimage, slotX + (slotSize / 2) - (9 + slotBackOffset), slotY + (slotSize / 2) - (9 - slotBackOffset), 1, 1, 0, c_white, image_alpha * slotBackAlpha * 2);
                }
            }
            //Draw Slot
            draw_sprite_ext(slotSprite, 0, slotX, slotY, 1, 1, 0, c_white, image_alpha);
            if not slot = 0
            {
                draw_sprite_ext(itemSprite, itemSubimage, slotX + (slotSize / 2) - 9, slotY + (slotSize / 2) - 9, 1, 1, 0, c_white, image_alpha);
                draw_set_font(fnt_SystemFont);
                draw_set_halign(fa_right);
                draw_set_valign(fa_bottom);
                draw_text_ext_transformed_colour((slotX + slotSize) - 4, slotY - 3, itemNumber, 16, slotSize * 8, 0.1625, 0.1625, 0, c_white, c_white, c_white, c_white, image_alpha);
                draw_set_halign(fa_left);
                draw_set_valign(fa_top);
            }
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw Weapon Slots
var i, slotX, slotY;
image_alpha = (-1 * obj_Menu.cursorAlpha) + 1;
draw_set_alpha(1);
if InventoryShown
{
    slotY = slotYOffset + ((invH + 1) * slotSize);
    for (i = 0; i &lt; 10; i += 1)
    {
        slotX = slotXOffset + (i * slotSize) + (i * 4) + obj_Menu.menuOffset;
        //Query slot record
        weaponSlot = ds_list_find_value(obj_WeaponSwitcher.WeaponsList, i);
        //Record items if slot is filled
        if is_string(weaponSlot)
        {
            wi = ds_list_find_index(dbWeapons, weaponSlot);
            weaponSprite = ds_list_find_value(dbWeapons, wi + 1);
            weaponSubimage = ds_list_find_value(dbWeapons, wi + 2);
        }
        //Draw Back
        if obj_WeaponSwitcher.Weapon = i
        {
            draw_sprite_ext(sht_WeaponSlots, i, slotX - 4, slotY + 4, 1, 1, 0, c_white, image_alpha * 0.32);
            draw_set_alpha(image_alpha * 0.64);
            draw_rectangle_colour(slotX + 3, slotY + 2, slotX + slotSize - 4, slotY + slotSize - 3, c_black, c_black, c_black, c_black, false);
            draw_set_alpha(image_alpha);
            if is_string(weaponSlot)
            {
                draw_sprite_ext(weaponSprite, weaponSubimage, slotX + (slotSize / 2) - 13, slotY + (slotSize / 2) - 5, 1, 1, 0, c_white, image_alpha * 0.5);
            }
        }
        //Draw Slot
        draw_sprite_ext(sht_WeaponSlots, i, slotX, slotY, 1, 1, 0, c_white, image_alpha);
        if i = 9
        {
            i = -1
        }
        if is_string(weaponSlot)
        {
            draw_sprite_ext(weaponSprite, weaponSubimage, slotX + (slotSize / 2) - 9, slotY + (slotSize / 2) - 9, 1, 1, 0, c_white, image_alpha);    
            draw_set_font(fnt_SystemFont);
            draw_set_halign(fa_right);
            draw_set_valign(fa_bottom);
            draw_text_ext_transformed_colour((slotX + slotSize) - 4, slotY, i + 1, 32, slotSize * 8, 0.1625, 0.1625, 0, c_white, c_white, c_white, c_white, image_alpha);
            draw_set_halign(fa_left);
            draw_set_valign(fa_top);
        }
        else
        {
            draw_set_font(fnt_SystemFont);
            draw_set_halign(fa_right);
            draw_set_valign(fa_bottom);
            draw_text_ext_transformed_colour((slotX + slotSize) - 4, slotY, i + 1, 32, slotSize * 8, 0.1625, 0.1625, 0, c_white, c_white, c_white, c_white, image_alpha * 0.25);
            draw_set_halign(fa_left);
            draw_set_valign(fa_top);
        }
        if i = -1
        {
            i = 9
        }        
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw Tooltip
if InventoryShown
{
    if tooltipShown
    {
        draw_tooltip(obj_GUI.cursor_x, obj_GUI.cursor_y, image_alpha);
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="77">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Decrease Mana
obj_Player.statMana -= 1;
obj_GUI.alarm[1] = room_speed * 0.2;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="18">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Add Item
InventoryList = inventory_add(InventoryList, "Lesser Potion of Healing", 1);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="17">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Add Item
InventoryList = inventory_add(InventoryList, "Lesser Potion of Magick", 1);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
