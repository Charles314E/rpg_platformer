<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_Menu</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-1000002</depth>
  <persistent>-1</persistent>
  <parentName>par_HUDObject</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Initialize Attributes
MenuShown = false;
Nested = false;
backAlpha = 0;
Option = 0;
cursorSubimage = 0;
quitCursorSubimage = 0;
Qutting = 0;
instance_create(0, 0, obj_Inventory);
instance_create(0, 0, obj_Status);
instance_create(0, 0, obj_Map);

optionsList = ds_list_create();
ds_list_add(optionsList, "Inventory", "Status", "Skills", "Map", "Options", "Quit");
exclusions = ds_list_create();
ds_list_add(exclusions, 2, 4);

textAlpha = 0;
textOffset = 0;
n = 0;
menuOffset = 64;
cursorAlpha = 1;
lineAlpha = 0;
canTab = true;
createQuitCursor = false;

Quitting = false;
QuitTimer = 0;
QuitRollover = 3;
qChar = 0;
QuitMessage = "Are you sure you want to quit?";
CurrentQuitMessage = "";
QuitConfirmChoice = "Yes";
CurrentQuitConfirmChoice = "";
QuitDeclineChoice = "No";
CurrentQuitDeclineChoice = "";
quitOption = 0;
quitTextAlpha = 0;
quitTextOffset = 0;
qN = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="8">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Animate Quit Cursor
if createQuitCursor
{
    quitCursorSubimage += 1;
    alarm[8] = room_speed * obj_GUI.FrameModulus * 0.2;
}
else
{
    quitCursorSubimage = 0;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="7">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Create Quit Option Shadow
if qN &lt; 16
{
    quitTextAlpha += 0.01;
    quitTextOffset += 0.25;
    qN += 1;
    alarm[7] = room_speed / 30;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="6">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Execute Command
switch ds_list_find_value(optionsList, Option)
{
    case "Inventory":
            obj_Inventory.InventoryShown = true;
            canTab = true;
            break;
    case "Status":
            obj_Status.StatusShown = true;
            canTab = true;
            break;
    case "Map":
            obj_Map.MapShown = true;
            canTab = true;
            break;            
    case "Quit":
            alarm[7] = room_speed / 30;
            canTab = true;
            break;
    default:
            alarm[5] = room_speed / 30;
            break;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="5">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Shift Menu Options Up
if cursorAlpha &lt; 1
{
    canTab = false;
    menuOffset += 3.2
    cursorAlpha += 0.05;
    lineAlpha -= 0.05;
    alarm[5] = room_speed / 30;
}
else
{
    canTab = true;
    Nested = false;
    if ds_list_find_value(optionsList, Option) = "Inventory"
    {
        obj_Inventory.InventoryShown = false;
    }
    else if ds_list_find_value(optionsList, Option) = "Status"
    {
        obj_Status.StatusShown = false;
    }
    else if ds_list_find_value(optionsList, Option) = "Map"
    {
        obj_Map.MapShown = false;
    }
    else if ds_list_find_value(optionsList, Option) = "Quit"
    {
        Quitting = false;
        qChar = 0;
        QuitTimer = 0;
        CurrentQuitMessage = "";
        CurrentQuitConfirmChoice = "";
        CurrentQuitDeclineChoice = "";
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Shift Menu Options Down
if cursorAlpha &gt; 0
{
    canTab = false;
    menuOffset -= 3.2
    cursorAlpha -= 0.05;
    lineAlpha += 0.05;
    alarm[4] = room_speed / 30;
}
else
{
    alarm[6] = room_speed / 30;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Create Option Shadow
if n &lt; 32
{
    textAlpha += 0.01;
    textOffset += 0.25;
    n += 1;
    alarm[3] = room_speed / 30;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Animate Cursor
if MenuShown
{
    cursorSubimage += 1;
    alarm[2] = room_speed * obj_GUI.FrameModulus * 0.2;
}
else
{
    cursorSubimage = 0;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Lighten Background
if backAlpha &gt; 0
{
    backAlpha -= 0.02;
    alarm[1] = room_speed / 30;
}
else
{
    obj_GUI.GameFrozen = false;
    MenuShown = false;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Darken Background
if backAlpha &lt; 0.5
{
    backAlpha += 0.02;
    alarm[0] = room_speed / 30;
}
else
{
    alarm[2] = room_speed / 30;
    textAlpha = 0;
    textOffset = 0;
    n = 0;
    alarm[3] = room_speed / 30;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Toggle Menu
if obj_GUI.kpMenu
{
    if (not obj_GUI.GameFrozen and backAlpha &lt;= 0) or backAlpha &gt;= 0.5
    {
        if MenuShown = false
        {
            obj_GUI.GameFrozen = true;
            alarm[0] = room_speed / 30;
            MenuShown = true;
            textAlpha = 0;
            textOffset = 0;
            n = 0;
        }
        else if cursorAlpha = 0 or cursorAlpha = 1
        {
            if not Nested
            {
                alarm[1] = room_speed / 30;
            }
            else
            {
                alarm[5] = room_speed / 30;
            }
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Move Cursor
if MenuShown and not Nested and backAlpha &gt;= 0.5
{
    if obj_GUI.kpDown
    {
        Option = min(Option + 1, ds_list_size(optionsList) - 1);
        textAlpha = 0;
        textOffset = 0;
        n = 0;
        alarm[3] = room_speed / 30;
    }
    if obj_GUI.kpUp
    {
        Option = max(Option - 1, 0);
        textAlpha = 0;
        textOffset = 0;
        n = 0;
        alarm[3] = room_speed / 30;
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Select Option
if MenuShown and not Nested and backAlpha &gt;= 0.5
{
    if obj_GUI.kpInteract or obj_GUI.kpAttack
    {
        Nested = true;
        if ds_list_find_value(optionsList, Option) = "Inventory"
        {
            obj_Inventory.InventoryShown = true;
        }
        else if ds_list_find_value(optionsList, Option) = "Status"
        {
            obj_Status.StatusShown = true;
        }
        else if ds_list_find_value(optionsList, Option) = "Map"
        {
            obj_Map.alarm[0] = 1;
            obj_Map.MapShown = true;
        }
        else if ds_list_find_value(optionsList, Option) = "Quit"
        {
            Quitting = true;
        }
        alarm[4] = room_speed / 30;
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Quitting
if MenuShown and Nested and Quitting and backAlpha &gt;= 0.5
{
    QuitTimer += 1;
    createQuitCursor = false;
    if QuitTimer &gt;= QuitRollover + 1
    {
        if qChar &lt; string_length(QuitMessage)
        {
            qChar += 1;
            CurrentQuitMessage = string_copy(QuitMessage, 1, qChar);
            QuitTimer = 0;
        }
        else
        {
            if qChar &lt; string_length(QuitMessage) + string_length(QuitConfirmChoice) + 5
            {
                qChar += 1;
                CurrentQuitConfirmChoice = string_copy(QuitConfirmChoice, 1, qChar - string_length(QuitMessage) - 5);
                QuitTimer = 0;
            }
            else if qChar &lt; string_length(QuitMessage) + string_length(QuitConfirmChoice) + string_length(QuitDeclineChoice) + 15
            {
                qChar += 1;
                CurrentQuitDeclineChoice = string_copy(QuitDeclineChoice, 1, qChar - (string_length(QuitMessage) + string_length(QuitConfirmChoice)) - 10);
                QuitTimer = 0;
            }
            else if qChar = string_length(QuitMessage) + string_length(QuitConfirmChoice) + string_length(QuitDeclineChoice) + 15
            {
                qChar += 1
                alarm[7] = room_speed / 30;
                alarm[8] = room_speed / 30;
                createQuitCursor = true;
            }
            else
            {
                createQuitCursor = true;
            }
        }
    }
}
else
{
    createQuitCursor = false;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Move Quit Cursor
if MenuShown and Quitting and Nested and backAlpha &gt;= 0.5
{
    if obj_GUI.kpRight
    {
        quitOption = min(quitOption + 1, 1);
        quitTextAlpha = 0;
        quitTextOffset = 0;
        qN = 0;
        alarm[7] = room_speed / 30;
    }
    else if obj_GUI.kpLeft
    {
        quitOption = max(quitOption - 1, 0);
        quitTextAlpha = 0;
        quitTextOffset = 0;
        qN = 0;
        alarm[7] = room_speed / 30;
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Select Quit Option
if MenuShown and Nested and Quitting and backAlpha &gt;= 0.5
{
    if createQuitCursor
    {
        if obj_GUI.kpInteract or obj_GUI.kpAttack
        {
            switch quitOption
            {
                case 0: game_reset();
                        break;
                case 1: alarm[5] = room_speed / 30; break;
            }
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw Background
if backAlpha &gt; 0
{
    draw_set_alpha(backAlpha);
    draw_rectangle_colour(0, 0, view_wport[view_current], view_hport[view_current], c_black, c_black, c_black, c_black, false);
    draw_set_alpha(1);
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw Menu
if backAlpha &gt;= 0.5
{
    var i;
    draw_set_font(fnt_TitleFont);
    draw_set_halign(fa_center);
    draw_set_valign(fa_center);
    draw_text_ext_transformed_colour(view_wport[view_current] / 2, 32, "Paused", 0, 480, 1, 1, 0, c_white, c_white, c_white, c_white, 1);
    draw_set_font(fnt_Designs);
    draw_text_ext_transformed_colour(view_wport[view_current] / 2, 32, ")", 0, 480, 0.8, 0.8, 0, c_white, c_white, c_white, c_white, 0.25);
    draw_set_valign(fa_top);
    draw_set_halign(fa_left);
    draw_menu(optionsList, Option, 32, 190, exclusions);
    draw_set_alpha(lineAlpha);
    draw_line_colour((view_wport[view_current] * 0.5) - (128 - menuOffset + 64), 190, (view_wport[view_current] * 0.5) - (128 - menuOffset + 64), view_hport[view_current] - 64, c_white, c_white);
    for (i = 1; i &lt; 7; i += 1)
    {
        draw_set_alpha(((8 - i) / 8) * (lineAlpha - 0.5));
        draw_line_colour((view_wport[view_current] * 0.5) - (128 - i - menuOffset + 64), 190 + (i * 2), (view_wport[view_current] * 0.5) - (128 - i - menuOffset + 64), view_hport[view_current] - (64 + (i * 2)), c_white, c_white);
    }
    draw_set_alpha(1);
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw Quit Text
var quitAlpha;
quitAlpha = (-1 * obj_Menu.cursorAlpha) + 1;
draw_set_font(fnt_MenuFont);
if Quitting
{
    draw_text_transformed_colour((view_wport[view_current] / 2) - 64 + obj_Menu.menuOffset, (view_hport[view_current] / 2) - 64, CurrentQuitMessage, 0.3, 0.3, 0, c_white, c_white, c_white, c_white, quitAlpha);
    switch quitOption
    {
        case 0: if createQuitCursor
                {
                    draw_sprite_ext(ani_ChoiceArrow, quitCursorSubimage, (view_wport[view_current] / 2) - 32 + obj_Menu.menuOffset, (view_hport[view_current] / 2) + 16, 1, 1, 0, c_white, quitAlpha);
                }
                draw_text_transformed_colour((view_wport[view_current] / 2) + obj_Menu.menuOffset - quitTextOffset, (view_hport[view_current] / 2) + quitTextOffset, CurrentQuitConfirmChoice, 0.3, 0.3, 0, c_white, c_white, c_white, c_white, quitAlpha * quitTextAlpha); 
                break;
        case 1: if createQuitCursor
                {
                    draw_sprite_ext(ani_ChoiceArrow, quitCursorSubimage, (view_wport[view_current] / 2) + 160 + obj_Menu.menuOffset, (view_hport[view_current] / 2) + 16, 1, 1, 0, c_white, quitAlpha);
                }
                draw_text_transformed_colour((view_wport[view_current] / 2) + 192 + obj_Menu.menuOffset - quitTextOffset, (view_hport[view_current] / 2) + quitTextOffset, CurrentQuitDeclineChoice, 0.3, 0.3, 0, c_white, c_white, c_white, c_white, quitAlpha * quitTextAlpha); 
                break;
    }
    draw_text_transformed_colour((view_wport[view_current] / 2) + obj_Menu.menuOffset, (view_hport[view_current] / 2), CurrentQuitConfirmChoice, 0.3, 0.3, 0, c_white, c_white, c_white, c_white, quitAlpha);
    draw_text_transformed_colour((view_wport[view_current] / 2) + 192 + obj_Menu.menuOffset, (view_hport[view_current] / 2), CurrentQuitDeclineChoice, 0.3, 0.3, 0, c_white, c_white, c_white, c_white, quitAlpha);    
}
draw_set_font(fnt_SystemFont);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
