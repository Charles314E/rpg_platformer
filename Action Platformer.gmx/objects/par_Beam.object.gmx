<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>ani_GolemEyeBeam</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Initialize Variables
Section = 0;
State = 0;
Angle = 0;
Source = noone;
xOffset = 0;
yOffset = 0;
beamSound = noone;
beamPitch = 0.5;
sfx_beam = noone;
fullImage = 4;
fullSpeed = 0.5;
quakeSpeed = 2;

Length = sprite_width;
OriginSprite = noone;

Collided = false;
Tracking = true;
Target = obj_Player;

Particles = false;
BeamParticleCountdown = -1;
BeamParticleTimer = 12;

OriginSprite = noone;
FiringSprite = sprite_index;
OriginContractingSprite = noone;
ContractingSprite = noone;

depth = 0;
image_index = 0;
switch State
{
    case 0: image_speed = 0; break;
    case 1: image_speed = 1 * obj_GUI.FrameModulus; break;
    case 2: image_speed = 0.25 * obj_GUI.FrameModulus; break;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Play Sound
if Section = 1
{
    if beamSound != noone
    {
        if sfx_beam != noone
        {
            if audio_sound_get_track_position(sfx_beam) &gt; 1
            {
                switch State
                {
                    case 1: sfx_beam = audio_play_sound(sfx_GolranCharging, 0, false);
                            audio_sound_pitch(sfx_beam, beamPitch);
                            break;
                    default: sfx_beam = audio_play_sound(beamSound, 0, false); 
                            audio_sound_pitch(sfx_beam, beamPitch);
                            audio_sound_set_track_position(sfx_beam, 0.5);
                            break;
                }
            }
        }
        else
        {
            switch State
            {
                case 1: sfx_beam = audio_play_sound(sfx_GolranCharging, 0, false);
                        audio_sound_pitch(sfx_beam, beamPitch);
                        break;
                default: sfx_beam = audio_play_sound(beamSound, 0, false); 
                        audio_sound_pitch(sfx_beam, beamPitch);
                        audio_sound_set_track_position(sfx_beam, 0.5);
                        break;
            }
        }
    }
    audio_sound_gain(sfx_beam, 1, 1);
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Contract if Source is Dead
if not instance_exists(Source)
{
    State = 3;
}
if object_is_ancestor(Source, par_Entity)
{
    if Source.Dead
    {
        State = 3;
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Set Distance and Angle
var ax, ay;
if instance_exists(Source)
{
    if Tracking
    {
        Angle = point_direction(Source.x, Source.y, Source.TargetX, Source.TargetY) + 90;
    }
    image_angle = Angle - 90;
    
    ax = (Length * sin(Angle * pi / 180)) * Section;
    ay = (Length * cos(Angle * pi / 180)) * Section;
    x = Source.x + xOffset + ax;
    y = Source.y + yOffset + ay;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Set Animation Speed
if not obj_GUI.GameFrozen
{
    switch State
    {
        case 0: image_speed = 0; break;
        case 1: image_speed = (fullSpeed * 4) * obj_GUI.FrameModulus; break;
        case 2: image_speed = 0.25 * obj_GUI.FrameModulus; break;
        case 3: image_speed = (fullSpeed * 4) * obj_GUI.FrameModulus; break;
    }
    
    if State = 1
    {
        if round(image_index) = fullImage
        {
            State = 2;
        }
    }
}
else
{
    image_speed = 0;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Countdown to Beam Particle
if not obj_GUI.GameFrozen and Particles
{
    if BeamParticleCountdown &gt;= (BeamParticleTimer - 1)
    {
        BeamParticleCountdown = -1;
    }
    else if BeamParticleCountdown &gt;= 0
    {
        BeamParticleCountdown += 1;
    }
    else if BeamParticleCountdown = -1
    {
        BeamParticleCountdown = 0;
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Disappear If Meeting Block
beam_check_collision();
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Apply Effect
if not obj_GUI.GameFrozen
{
    selectedTarget = instance_place(x, y, Target);
    if selectedTarget != noone and State = 2 and not Collided
    {
        alarm[1] = room_speed * 0.1;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="7">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Reset Pulse
if State = 1 or State = 2
{
    image_index = fullImage;
}
else if State = 3
{
    if sprite_index = FiringSprite
    {
        sprite_index = ContractingSprite;
        OriginSprite = OriginContractingSprite;
        image_index = 0;
        if Section = 1
        {
            if beamSound != noone
            {
                audio_sound_gain(sfx_beam, 0, 1);
            }
        }
    }
    else if sprite_index = ContractingSprite
    {
        if Section = 1
        {
            if beamSound != noone
            {
                audio_sound_gain(sfx_beam, 0, 1);
            }
        }
        instance_destroy();
        if instance_exists(Source)
        {
            if Source.Firing
            {
                Source.Firing = false;
            }
            if object_index = obj_RepulsorBeam
            {
                if Source.FiringRepulsor
                {
                    Source.FiringRepulsor = false;
                }
            }
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw Self
if (Section == 1 and OriginSprite != noone) {
    draw_sprite_ext(OriginSprite, image_index, x, y, 1, 1, image_angle, c_white, image_alpha);
}
draw_self();
if (not obj_GUI.GameFrozen and Particles) {
    if ((State == 1 or State == 2) and BeamParticleCountdown &gt;= (BeamParticleTimer - 2)) {
        alarm[0] = 1;
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw Information
draw_set_alpha(1);
if (obj_GUI.Debug) {
    if (instance_exists(Source)) {
        draw_circle_colour(Source.x, Source.y, abs(point_distance(x, y, Source.x, Source.y)), c_red, c_red, true);
    }
    draw_text_ext_transformed_colour(x - 90, y - 24, string(State), 0, 96, 0.20, 0.20, 0, c_black, c_black, c_black, c_black, 1);
    if (Collided) {
        draw_set_alpha(0.25);
        draw_rectangle_colour(bbox_left, bbox_top, bbox_right, bbox_bottom, c_lime, c_lime, c_lime, c_lime, false);
        draw_set_alpha(0.5);
    }
    else {
        draw_set_alpha(0.5);
        draw_rectangle_colour(bbox_left, bbox_top, bbox_right, bbox_bottom, c_lime, c_lime, c_lime, c_lime, false);
        draw_set_alpha(1);
    }
}
image_alpha = 1;
if (Collided) {
    image_alpha = 0;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
