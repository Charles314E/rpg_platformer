<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_RoomTransition</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>-1</persistent>
  <parentName>par_HUDObject</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Initialize Variables
sprite_index = noone;
image_speed = obj_GUI.FrameModulus;
obj_GUI.GameFrozen = true;
Moved = false;
Map = noone;
MapType = noone;
pDir = 90;
X = 0;
Y = 0;
posX = 0;
posY = 0;
elevatorTransition = false;
init = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Check Room Names
if not init
{
    if not is_undefined(Map)
    {
        roomName = check_room_name(room, Map, true);
        init = true;
    }
    else
    {
        instance_destroy();
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Move To Room
if not Moved
{
    if round(image_index) = max(0, floor(image_number / 2) - 1)
    {
        with msg_RoomName
        {
            instance_destroy();
        }
        teleport(Map, MapType, pDir, X, Y);
        if not is_undefined(Map)
        {
            var xx = ds_list_find_value(obj_Controller.defaultElevatorLocation, 0);
            var yy = ds_list_find_value(obj_Controller.defaultElevatorLocation, 1);
            show_debug_message("Elevator Location: (" + string(xx) + ", " + string(yy) + ")");
            show_debug_message("[DBG]: Player is at (" + string(obj_Player.x) + ", " + string(obj_Player.y) + ").");
            //obj_Player.y -= 8;
            
            obj_GUI.GameFrozen = false;
            obj_GUI.Cutscene = true;
            if obj_Controller.MapType = "Platform"
            {
                switch pDir
                {
                    case 270: obj_Player.hSpeed = -2; break;
                    case 90: obj_Player.hSpeed = 2; break;
                }
            }
            Moved = true;
        }
    }
}
else
{
    if not is_undefined(Map)
    {
        with obj_Player
        {
            if obj_Controller.MapType = "Platform"
            {
                switch dir
                {
                    case -1: sprite_index = leftStanding; break;
                    case 1: sprite_index = rightStanding; break;
                    default: sprite_index = leftStanding; break;
                    obj_Player.hSpeed = dir * 2;
                }
            }
            else if obj_Controller.MapType = "World"
            {
                sprite_index = worldStanding;
                hSpeed = 0;
                vSpeed = 0;
            }
        }
        if other.elevatorTransition
        {
            var xx = ds_list_find_value(obj_Controller.defaultElevatorLocation, 0);
            elevator = instance_create(xx, obj_Player.bbox_bottom + 1, obj_Elevator);
            with elevator
            {
                Floor = other.Floor;
                HighestFloor = other.HighestFloor;
                LowestFloor = other.LowestFloor;
                hSpeed = other.elevatorHSpeed;
                vSpeed = other.elevatorVSpeed;
            }
            show_debug_message("[DBG]: Created elevator " + string(elevator) + " in room " + room_get_name(room) + " at (" + string(xx) + ", " + string(obj_Player.bbox_bottom + 1) + "), player is at (" + string(obj_Player.x) + ", " + string(obj_Player.y) + ").");
            other.elevatorTransition = false;
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="7">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Destroy Instance
obj_GUI.GameFrozen = false;
obj_GUI.Cutscene = false;
if not is_undefined(roomName)
{
    if roomName != "" and not instance_exists(msg_RoomName)
    {
        with instance_create(0, 0, msg_RoomName)
        {
            Name = other.roomName;
        }
        show_debug_message("[DBG]: Showed room name " + string(roomName) + ".");
    }
}
instance_destroy();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw Transition
draw_sprite_ext(sprite_index, image_index, 0, 0, view_wport[view_current] / sprite_width, view_hport[view_current] / sprite_height, 0, c_white, 1);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
