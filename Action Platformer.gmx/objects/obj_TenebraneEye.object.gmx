<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>ani_TenebraneEye</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-1</depth>
  <persistent>0</persistent>
  <parentName>obj_Enemy</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///event_inherited()
event_inherited();
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Initialize Attributes
r = 10;
NoGravity = true;
Incorporeal = true;
InRadius = false;
selfFriction = 0.2;
Invulnerable = false;
Vulnerable = false;
dir = 1;
DamageTaken = 0;
DoubleAttacked = -1;
Dead = false;
image_speed = 0.2;
Finished = false;
Unkillable = true;
Immovable = true;
SightRadius = 128;

Charging = -1;
Firing = false;
LockedOn = false;
BeamLength = 16;
BeamRotationSpeed = 16;
Section = 0;
BeamCollided = false;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Initialize Statistics
statStrength = 0;
statVitality = 14;
statDexterity = 0;
statFortitude = 13;
statWisdom = 19;
statMagic = 28;

enemyName = "Tenebrane";
lootExp = 20;
lootGold = 0;
set_statistics(self, true);
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Initialize Traits
traitLevitating = false;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Initialize States
stateNormal = sprite_index;
frameNormal = 1;
stateVulnerable = sprite_index;
frameVulnerable = 0;
stateDead = ani_TenebraneEye_death;
frameDead = 0.2;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Create Body
Section = 1;
with instance_create(x, y, obj_TenebraneSocket)
{
    Eye = other;
    image_index = Eye.image_index;
}
var xx, yy;
xx = x;
yy = y - TileDimensions;
while not place_meeting(xx, yy, obj_Block)
{
    with instance_create(xx, yy, obj_Tenebrane)
    {
        Eye = other;
        EyeName = Eye.object_index;
        image_index = Eye.image_index + (other.Section * 3);
        dir = sign(Eye.y - y);
    }
    yy -= TileDimensions;
    switch other.Section
    {
        case 0: other.Section = 1; break;
        case 1: other.Section = 0; break;
    }
}
Section = 1;
with instance_create(xx, yy, obj_Tenebrane)
{
    Eye = other;
    EyeName = Eye.object_index;
    image_index = Eye.image_index + (other.Section * 3);
    dir = sign(Eye.y - y);
}
yy = y + TileDimensions;
while not place_meeting(xx, yy, obj_Block)
{
    with instance_create(xx, yy, obj_Tenebrane)
    {
        Eye = other;
        EyeName = Eye.object_index;
        image_index = Eye.image_index + (other.Section * 3);
        dir = sign(Eye.y - y);
    }
    yy += TileDimensions;
    switch Section
    {
        case 0: other.Section = 1; break;
        case 1: other.Section = 0; break;
    }
}
with instance_create(xx, yy, obj_Tenebrane)
{
    Eye = other;
    EyeName = Eye.object_index;
    image_index = Eye.image_index + (other.Section * 3);
    dir = sign(Eye.y - y);
}
Finished = true;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Initialize VRI's
ds_list_add(Elements,
                    "MAGIC", 0.5,
                    "FIRE", 1.2,
                    "POISON", 1.5,
                    "DARKNESS", 0.0);
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Initialize Drops
lootDrops = ds_list_create();
ds_list_add(lootDrops,
        itm_CorruptedFlesh, 0.75, 4,
        itm_VileEye, 0.25, 1);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="11">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Collate Damage
with instance_create(x, y, txt_Damage)
{
    Damage = other.DamageStack;
    Origin = other;
}
DamageStack = 0;
DamageStacking = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Fire Beam
if not obj_GUI.GameFrozen
{
    Section += 1;
    var Angle, ax, ay;
    Angle = point_direction(x, y, TargetX, TargetY) + 90;
    ax = (BeamLength * sin(Angle * pi / 180)) * Section;
    ay = (BeamLength * cos(Angle * pi / 180)) * Section;
    Firing = true;
    LockedOn = false;
    if Section &gt; 140
    {
        Section = 0;
        Charging = -1;
        with obj_TenebraneBeam
        {
            State = 3;
        }
    }
    else
    {
        if Section &lt;= 60
        {
            LockedOn = true;
            with instance_create(x, y, obj_TenebraneBeam)
            {
                Source = other;
                xOffset = Source.sprite_width / 2;
                yOffset = Source.sprite_height / 2;
                Angle = point_direction(Source.x, Source.y, Source.TargetX, Source.TargetY) + 90;
                Section = other.Section;
                Length = other.BeamLength;
                State = 0;
                beam_check_collision();
            }
        }
        else
        {
            if Section &lt;= 80
            {
                with obj_TenebraneBeam
                {
                    State = 1;
                }
            }
        }
        alarm[3] = room_speed * 0.025;
    }
}
else
{
    alarm[3] = room_speed * 0.025;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Lock On
if not obj_GUI.GameFrozen
{
    if not Dead and sign(x - obj_Player.x) = 1
    {
        if not obj_GUI.GameFrozen
        {
            alarm[3] = room_speed * 0.05;
        }
    }
    else
    {
        alarm[2] = room_speed * 0.05;    
    }
}
else
{
    alarm[2] = room_speed * 0.05;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///event_inherited()
event_inherited();
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Refresh Statistics
set_statistics(self, false);
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Change Character Position
x += hSpeed;
y += vSpeed;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Turn in Correct Direction
image_xscale = dir;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Set Sprites
if Vulnerable and OnGround
{
    sprite_index = stateVulnerable;
    image_speed = frameVulnerable * FrameModulus;
}
if Dead
{
    sprite_index = stateDead;
    image_speed = frameDead * FrameModulus;    
}
else
{
    sprite_index = stateNormal;
    image_speed = frameNormal * FrameModulus;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Double Attack Damage
if !Dead
{
    if DoubleAttacked = 0
    {
        DoubleAttacked = -1;
        statHealth -= ClawDamage;
        with instance_create(x, y, txt_Damage)
        {
            Damage = other.ClawDamage;
        }
    }
    else
    {
        DoubleAttacked -= 1;
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Kill Entity
if statHealth &lt; 1 and Dead = false
{
    if instance_exists(obj_Player)
    {
        gain_experience(self);
    }
    Vulnerable = false;
    Dead = true;
    Invulnerable = false;
    if NoGravity = true
    {
        NoGravity = false;
    }
    sprite_index = stateDead;
    image_index = 0;
    image_speed = frameDead * obj_GUI.FrameModulus;
} 
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Track Player
if not obj_GUI.GameFrozen
{
    if not Dead
    {
        if instance_exists(obj_Player)
        {
            if distance_to_point(obj_Player.x, obj_Player.y) &lt; SightRadius
            {
                Tracking = true;
                if not LockedOn and Firing
                {
                    Tracking = false;
                }
                else
                {
                    var dx, dy;
                    dx = obj_Player.x - x;
                    dy = obj_Player.y - y;
                    TargetX += sign(dx) * max(8, abs(dx)) * (BeamRotationSpeed * 0.1);
                    TargetY += sign(dy) * max(8, abs(dy)) * (BeamRotationSpeed * 0.1);
                    if Charging = -1
                    {
                        alarm[2] = room_speed;
                        Charging = room_speed;
                    }
                }
                if not Firing
                {
                    TargetX = obj_Player.x;
                    TargetY = obj_Player.y;
                }
            }
            else
            {
                if Firing
                {
                    var dx, dy;
                    dx = obj_Player.x - x;
                    dy = obj_Player.y - y;
                    TargetX += sign(dx) * max(8, abs(dx)) * (BeamRotationSpeed * 0.1);
                    TargetY += sign(dy) * max(8, abs(dy)) * (BeamRotationSpeed * 0.1);
                }
                else
                {
                    with obj_TenebraneBeam
                    {
                        if Source = other
                        {
                            instance_destroy();
                        }
                    }
                    TargetX = x;
                    TargetY = y;
                }
                hasBeam = false;
                with obj_TenebraneBeam
                {
                    if Source = other
                    {
                        other.hasBeam = true;
                    }
                }
                if not hasBeam
                {
                    TargetX = obj_Player.x;
                    TargetY = obj_Player.y;
                }
            }
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Set Animation Speed
if not Dead
{
    if instance_exists(obj_TenebraneSocket)
    {
        var inst = instance_place(x, y, obj_TenebraneSocket);
        if inst
        {
            image_index = inst.image_index;
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw Tracking Line
if obj_GUI.Debug
{
    if distance_to_point(TargetX, TargetY) &lt; SightRadius
    {
        draw_line_colour(x, y, TargetX, TargetY, c_red, c_red);
    }
    draw_circle_colour(x, y, SightRadius, c_red, c_red, true);
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///event_inherited()
event_inherited();
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
