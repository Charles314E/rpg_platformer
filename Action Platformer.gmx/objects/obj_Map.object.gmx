<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_Map</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-1000003</depth>
  <persistent>-1</persistent>
  <parentName>par_HUDObject</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Initialize Variables
vW = 24;
vH = 18;
cX = floor(vW / 2) - 1;
cY = floor(vH / 2) - 1;
MapShown = false;
mapXOffset = (view_wport[view_current] / 2) - 64;
mapYOffset = 222;
cS = 16;
cC = 2;
alarm[0] = 1;

MapGrid = ds_grid_create((room_width / TileDimensions), (room_height / TileDimensions));

alarm[1] = room_speed / 30;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Get Cursor Position
if obj_Menu.MenuShown and obj_Menu.Nested and MapShown and obj_Menu.backAlpha &gt;= 0.5
{
    if obj_GUI.kpLeft or obj_GUI.khLeft
    {
        cX = max(floor(vW / 2) - 1, cX - 1);
    }
    if obj_GUI.kpRight or obj_GUI.khRight
    {
        cX = min(ds_grid_width(MapGrid) - floor(vW / 2), cX + 1);
    }
    if obj_GUI.kpUp or obj_GUI.khUp
    {
        cY = max(floor(vH / 2) - 1, cY - 1);
    }
    if obj_GUI.kpDown or obj_GUI.khDown
    {
        cY = min(ds_grid_height(MapGrid) - floor(vH / 2), cY + 1);
    }
}
alarm[1] = room_speed / 30
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Fill Map Grid
ds_grid_destroy(MapGrid);
MapGrid = ds_grid_create((room_width / TileDimensions), (room_height / TileDimensions));
ds_grid_clear(MapGrid, 0);
playerLocated = false;
for (yy = 0; yy &lt; room_height; yy += TileDimensions)
{
    for (xx = 0; xx &lt; room_width; xx += TileDimensions)
    {
        //Liquids
        if collision_rectangle(xx + cC, yy + cC, xx + TileDimensions - cC - 1, yy + TileDimensions - cC - 1, par_Liquid, true, false)
        {
            ds_grid_set(MapGrid, xx / TileDimensions, yy / TileDimensions, 2);
            //Water
            if collision_rectangle(xx + cC, yy + cC, xx + TileDimensions - cC - 1, yy + TileDimensions - cC - 1, obj_Water, true, false)
            {
                ds_grid_set(MapGrid, xx / TileDimensions, yy / TileDimensions, 2.1);
            }
            //Lava
            if collision_rectangle(xx + cC, yy + cC, xx + TileDimensions - cC - 1, yy + TileDimensions - cC - 1, obj_Lava, true, false)
            {
                ds_grid_set(MapGrid, xx / TileDimensions, yy / TileDimensions, 2.2);
            }
        }
        //Player
        if collision_rectangle(xx + cC, yy + cC, xx + TileDimensions - cC - 1, yy + TileDimensions - cC - 1, obj_Player, true, false)
        {
            if not playerLocated
            {
                ds_grid_set(MapGrid, xx / TileDimensions, yy / TileDimensions, 3);
                playerLocated = true;
            }
        }
        //Slopes
        if collision_rectangle(xx + cC, yy + cC, xx + TileDimensions - cC - 1, yy + TileDimensions - cC - 1, obj_Block, true, false)
        {
            inst = collision_rectangle(xx + cC, yy + cC, xx + TileDimensions - cC - 1, yy + TileDimensions - cC - 1, obj_Block, true, false);
            sx = inst.x;
            sy = inst.y;
            sw = inst.image_xscale;
            sh = inst.image_yscale;
            slope = ds_list_create();
            if inst.object_index = obj_SlopeTL
            {
                ds_list_add(slope, 1.1, sw, sh);
                ds_grid_set(MapGrid, sx / TileDimensions, sy / TileDimensions, slope);
            }
            else if inst.object_index = obj_SlopeTR
            {
                ds_list_add(slope, 1.2, sw, sh);
                ds_grid_set(MapGrid, sx / TileDimensions, sy / TileDimensions, slope);
            }
            else if inst.object_index = obj_SlopeBL
            {
                ds_list_add(slope, 1.3, sw, sh);
                ds_grid_set(MapGrid, sx / TileDimensions, sy / TileDimensions, slope);
            }
            else if inst.object_index = obj_SlopeBR
            {
                ds_list_add(slope, 1.4, sw, sh);
                ds_grid_set(MapGrid, sx / TileDimensions, sy / TileDimensions, slope);
            }
            else
            {
                ds_grid_set(MapGrid, xx / TileDimensions, yy / TileDimensions, 1);
            }
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw Map
var xx, yy, mx, my;
image_alpha = (-1 * obj_Menu.cursorAlpha) + 1;
draw_set_alpha(1);
if MapShown and obj_Controller.MapRooms = noone
{
    create_message_box("", sht_Box, 24, 18, noone, image_alpha, mapXOffset + obj_Menu.menuOffset, mapYOffset);
    for (yy = 0; yy &lt; ds_grid_height(MapGrid); yy += 1)
    {
        my = mapYOffset + 2 + (yy * cS) - ((cY - floor(vH / 2)) * cS) - 12;
        for (xx = 0; xx &lt; ds_grid_width(MapGrid); xx += 1)
        {
            mx = mapXOffset + 3 + (xx * cS) + obj_Menu.menuOffset - ((cX - floor(vW / 2)) * cS) - 12;
            if xx &gt; (cX - floor(vW / 2)) and xx &lt; (cX + floor(vW / 2))
            {
                if yy &gt; (cY - floor(vH / 2)) and yy &lt; (cY + floor(vH / 2))
                {
                    tile = ds_grid_get(MapGrid, xx, yy);
                    if not tile = 0
                    {
                        draw_set_alpha(image_alpha * 0.75);
                        switch tile
                        {
                            case 1: 
                                    draw_rectangle_colour(mx, my, mx + cS, my + cS, c_navy, c_navy, c_navy, c_navy, false); break;
                            case 2.1:
                                    draw_set_alpha(image_alpha * 0.5);
                                    draw_rectangle_colour(mx, my, mx + cS, my + cS, c_blue, c_blue, c_blue, c_blue, false);
                                    break;
                            case 2.2: 
                                    draw_set_alpha(image_alpha * 0.5);
                                    if ds_grid_get(MapGrid, xx, yy - 1) = 2.2
                                    {
                                        draw_rectangle_colour(mx, my, mx + cS, my + cS, c_red, c_red, c_orange, c_orange, false);
                                    }
                                    else
                                    {
                                        draw_rectangle_colour(mx, my, mx + cS, my + cS, c_orange, c_orange, c_orange, c_orange, false); 
                                    }
                                    break;
                            case 3: 
                                    draw_rectangle_colour(mx, my, mx + cS, my + cS, c_red, c_red, c_red, c_red, false); break;
                        }
                        if ds_exists(tile, ds_type_list)
                        {
                            if ds_list_find_value(tile, 0) = 1.1
                            {
                                sw = ds_list_find_value(tile, 1);
                                sh = ds_list_find_value(tile, 2);
                                draw_triangle_colour(mx, my, mx + (cS * sw), my, mx, my + (cS * sh), c_navy, c_navy, c_navy, false);
                            }
                            if ds_list_find_value(tile, 0) = 1.2
                            {
                                sw = ds_list_find_value(tile, 1);
                                sh = ds_list_find_value(tile, 2);
                                draw_triangle_colour(mx + (cS * sw), my, mx, my, mx + (cS * sw), my + (cS * sh), c_navy, c_navy, c_navy, false);
                            }
                            if ds_list_find_value(tile, 0) = 1.3
                            {
                                sw = ds_list_find_value(tile, 1);
                                sh = ds_list_find_value(tile, 2);
                                draw_triangle_colour(mx, my + (cS * sh), mx + (cS * sw), my + (cS * sh), mx, my, c_navy, c_navy, c_navy, false);
                            }
                            if ds_list_find_value(tile, 0) = 1.4
                            {
                                sw = ds_list_find_value(tile, 1);
                                sh = ds_list_find_value(tile, 2);
                                draw_triangle_colour(mx + (cS * sw), my, mx + (cS * sw), my + (cS * sh), mx, my + cS, c_navy, c_navy, c_navy, false);
                            }
                        }
                        draw_set_alpha(1);
                    }
                }
            }
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw Dungeon Map
var xx, yy, n, cx, roomNumber, dw, dh, cw, ch, inRoom;
image_alpha = (-1 * obj_Menu.cursorAlpha) + 1;
draw_set_alpha(1);
if MapShown and obj_Controller.MapRooms != noone
{
    ww = 24;
    wh = 18;
    create_message_box("", sht_Box, ww, wh, noone, image_alpha, mapXOffset + obj_Menu.menuOffset, mapYOffset);
    roomNumber = ds_list_find_value(obj_Controller.MapRooms, 0);
    inRoom = false;
    dw = 0;
    dh = ds_list_size(obj_Controller.MapRooms) - 1;
    cw = 24;
    ch = 18;
    for (i = 1; i &lt; dh + 1; i += 1)
    {
        var newSize = string_length(ds_list_find_value(obj_Controller.MapRooms, i));
        if newSize &gt; dw
        {
            dw = newSize;
        }
    }
    for (yy = 1; yy &lt; dh + 1; yy += 1)
    {
        var str, strP, strN;
        str = ds_list_find_value(obj_Controller.MapRooms, yy);
        draw_text_transformed_colour(mapXOffset + obj_Menu.menuOffset, mapYOffset + (yy * 16), string_length(str) + 1, 0.1625, 0.1625, 0, c_white, c_white, c_white, c_white, image_alpha);
        if yy &gt; 1
        {
            strP = ds_list_find_value(obj_Controller.MapRooms, yy - 1);
        }
        if yy &lt; dh
        {
            strN = ds_list_find_value(obj_Controller.MapRooms, yy + 1);
        }
        for (xx = 1; xx &lt; string_length(str) + 1; xx += 1)
        {
            var cell, cellT, cellB, cellL, cellTL, cellBL, cellR, cellTR, cellBR;
            cell = string_char_at(str, xx);
            if yy &gt; 1
            {
                cellT = string_char_at(strP, xx);
            }
            if yy &lt; dh
            {
                cellB = string_char_at(strN, xx);
            }
            if xx &gt; 1
            {
                cellL = string_char_at(str, xx - 1);
                if yy &gt; 1
                {
                    cellTL = string_char_at(strP, xx - 1);
                }
                if yy &lt; dh
                {
                    cellBL = string_char_at(strN, xx - 1);
                }
            }
            if xx &lt; dw
            {
                cellR = string_char_at(str, xx + 1);
                if yy &gt; 1
                {
                    cellTR = string_char_at(strP, xx + 1);
                }
                if yy &lt; dh
                {
                    cellBR = string_char_at(strN, xx + 1);
                }
            }
            cx = (mapXOffset + obj_Menu.menuOffset) + (ww * 8) - (dw * cw * 0.5) + ((xx - 1) * cw);
            cy = mapYOffset + (wh * 8) - (dh * ch * 0.5) + ((yy - 1) * ch);
            if cell != " "
            {
                for (ii = 1; ii &lt; 36; ii += 1)
                {
                    n = string(ii);
                    if ii = 10
                    {
                        n = string(0);
                    }
                    else if ii &gt; 10
                    {
                        n = chr(i + 54);
                    }
                    rCol = c_navy;
                    tCol = c_white;
                    if cell = n
                    {
                        inRoom = false;
                        rCol = c_yellow;
                        tCol = c_black;
                    }
                }
                draw_rectangle_colour(cx + 2, cy + 2, cx + (cw - 2), cy + (ch - 2), rCol, rCol, rCol, rCol, false); break;
                if xx &gt; 1
                {
                    if cellL = cell
                    {
                        draw_rectangle_colour(cx, cy + 2, cx + 1, cy + (ch - 2), rCol, rCol, rCol, rCol, false);
                    }
                }
                if yy &gt; 1
                {
                    if cellT = cell
                    {
                        draw_rectangle_colour(cx + 2, cy, cx + (cw - 2), cy + 1, rCol, rCol, rCol, rCol, false);
                    }
                }
                if xx &lt; dw
                {
                    if cellR = cell
                    {
                        draw_rectangle_colour(cx + (cw - 1), cy + 2, cx + cw, cy + (ch - 2), rCol, rCol, rCol, rCol, false);
                    }
                }
                if yy &lt; dh
                {
                    if cellB = cell
                    {
                        draw_rectangle_colour(cx + 2, cy + (ch - 1), cx + (cw - 2), cy + ch, rCol, rCol, rCol, rCol, false);
                    }
                }
            }
            draw_set_halign(fa_middle);
            draw_set_valign(fa_middle);
            draw_text_transformed_colour(cx + (cw * 0.5), cy + (ch * 0.5), cell, 0.1625, 0.1625, 0, c_white, c_white, c_white, c_white, image_alpha);
            draw_set_halign(fa_left);
            draw_set_valign(fa_top);
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
