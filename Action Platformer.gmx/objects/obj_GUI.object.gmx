<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_GUI</spriteName>
  <solid>-1</solid>
  <visible>-1</visible>
  <depth>-1000003</depth>
  <persistent>-1</persistent>
  <parentName>par_HUDObject</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Keep Only One Instance
if instance_number(object_index) &gt; 1
{
    instance_destroy();
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Set Keybinds
set_keybinds(ord("W"), 
             ord("A"), 
             ord("S"), 
             ord("D"), 
             vk_space, 
             ord("E"), 
             vk_tab, 
             ord("Z"), 
             vk_shift, 
             ord("R"),
             ord("K"),
             mb_left,
             ord("G"));
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Create Derivative Objects
instance_create(0, 0, obj_Camera);
instance_create(0, 0, obj_WeaponSwitcher);
instance_create(0, 0, obj_Menu);
instance_create(0, 0, obj_Music);
instance_create(0, 0, obj_TimeRewind);
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Get Cursor Position and FPS
cursor_x = window_mouse_get_x();
cursor_y = window_mouse_get_y();
cursor_sprite = ani_CursorSprite;
window_set_cursor(cr_none);
FrameModulus = 30 / room_speed;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Change Font
draw_set_font(fnt_SystemFont);
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Get Player Attributes
if not obj_Menu.MenuShown
{
    if instance_exists(obj_Player)
    {
        PlayerAttributes = ds_list_create();
        ds_list_add(PlayerAttributes, obj_Player.statStrength, 
                                      obj_Player.statVitality, 
                                      obj_Player.statDexterity,
                                      obj_Player.statFortitude,
                                      obj_Player.statWisdom,
                                      obj_Player.statMagic);
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Initialize Variables
init = false;
GameFrozen = false;
Cutscene = false;
Debug = false;
Healthbars = false;
PlayerDamageCounter = 0;
statPointSubimage = 0;
skillPointSubimage = 8;
goldSubimage = -1;
Gold = 0;
partSystem = noone;
tooltipShown = false;

BackingHealth = 100;
BackingMana = 100;
BackingStamina = 100;
DecreasingHealth = false;
DecreasingMana = false;
DecreasingStamina = false;
HealthDraining = false;
ManaDraining = false;
StaminaDraining = false;
loadingRoom = false;
loadingRoomStarted = false;
savingRoom = false;
blackScreen = false;
File = 1;
NewGame = false;
Saved = false;
roomFirst = rm_TestRoom;

env_path = "";
SaveX = 0;
SaveY = 0;
SaveRoom = noone;
TestX = 96;
TestY = 289;
TestRoom = rm_TestRoom;
DefaultX = 136;
DefaultY = 321;
DefaultRoom = rm_Grotto1_room1;
RoomStartX = 0;
RoomStartY = 0;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Initialize Elements and Statuses
Elements = ds_list_create();
ds_list_add(Elements, "Magic", "Fire", "Ice", "Lightning", "Poison", "Holy", "Darkness");
Statuses = ds_list_create();
ds_list_add(Statuses, "Burn", "Poison", "Naseous", "Curse", "Paralyze");
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Initialize Game Switches and Variables
BarrierSwitch = 5;
Switches = ds_list_create();
for (i = 0; i &lt; 99; i += 1)
{
    if i = BarrierSwitch or i = 22
    {
        ds_list_add(Switches, true);
    }
    else
    {
        ds_list_add(Switches, false);
    }
}

Variables = ds_list_create();
for (i = 0; i &lt; 99; i += 1)
{
    ds_list_add(Variables, 0);
}

bossSwitches = ds_map_create();
ds_map_add(bossSwitches, "Golran", 6);
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Initialize Room Names
roomNames = ds_map_create();
ds_map_add(roomNames, "Grotto1", "Passfall Alcove");
ds_map_add(roomNames, "Grotto2", "Winding Cove");
ds_map_add(roomNames, "Grotto3", "West Cavern");
ds_map_add(roomNames, "Grotto4", "Forgotten Grotto");
ds_map_add(roomNames, "Village1", "Clifface Village");
ds_map_add(roomNames, "rm_PillarCliffs", "Pillar Cliffs");
ds_map_add(roomNames, "rm_PillarCliffs_outpost", "Clifface Outpost");
ds_map_add(roomNames, "rm_Bridge", "Connection Bridge");
ds_map_add(roomNames, "rm_Bridge_outpost1", "Eastbank Outpost");
ds_map_add(roomNames, "rm_Bridge_outpost2", "Westbank Outpost");
ds_map_add(roomNames, "Dungeon1", "Mountain Temple");
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Load Room
GameFrozen = true;
r_next = room_next(r_current);
if ds_list_find_value(string_split(room_get_name(r_next), "_"), 0) = "btl"
{
    while ds_list_find_value(string_split(room_get_name(r_next), "_"), 0) = "btl"
    {
        r_current = room_next(r_current);
        r_next = room_next(r_current);
        show_debug_message("[SKP]: " + room_get_name(r_current));
    }
    r_current = r_next;
    r_next = room_next(r_current);
    room_goto(r_current);
}
else
{
    r_current = load_room(r_current);
    if r_current = -1
    {
        show_debug_message("[LDS]: " + room_get_name(SaveRoom) + " (" + string(SaveX) + ", " + string(SaveY) + ")");
        if SaveRoom != noone
        {
            room_goto(SaveRoom);
            with obj_Player
            {
                x = other.SaveX;
                y = other.SaveY;
            }
        }
        else
        {
            if debug_mode
            {
                room_goto(TestRoom);
                with obj_Player
                {
                    x = other.TestX;
                    y = other.TestY;
                }
            }
            else
            {
                room_goto(TestRoom);
                with obj_Player
                {
                    x = other.TestX;
                    y = other.TestY;
                }
            }            
        }
        loadingRoom = false;
        blackScreen = false;
        GameFrozen = false;
    }
}
if instance_exists(obj_LoadingScreen)
{
    with obj_LoadingScreen
    {
        loadBar = min(1, loadBar + 1 / (5 + other.room_number));
    }
}
if loadingRoom
{
    alarm[3] = room_speed * 0.05;
}
else
{
    if instance_exists(obj_LoadingScreen)
    {
        with obj_LoadingScreen
        {
            Loading = false;
        }
        with obj_Camera
        {
            target = obj_Player;
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Gradually Decrease Backing Stamina
if not GameFrozen
{
    if BackingStamina &gt; obj_Player.statStamina / obj_Player.statMaxStamina * 100
    {
        BackingStamina -= 1;
        StaminaDraining = true;
        alarm[2] = room_speed / 30;
    }
    else if BackingStamina &lt; obj_Player.statStamina / obj_Player.statMaxStamina * 100
    {
        BackingStamina = obj_Player.statStamina / obj_Player.statMaxStamina * 100;
    }
}
else
{
    alarm[2] = room_speed / 30;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Gradually Decrease Backing Mana
if not GameFrozen
{
    if BackingMana &gt; obj_Player.statMana / obj_Player.statMaxMana * 100
    {
        BackingMana -= 1;
        ManaDraining = true;
        alarm[1] = room_speed / 30;
    }
    else if BackingMana &lt; obj_Player.statMana / obj_Player.statMaxMana * 100
    {
        BackingMana = obj_Player.statMana / obj_Player.statMaxMana * 100;
    }
}
else
{
    alarm[1] = room_speed / 30;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Gradually Decrease Backing Health
if not GameFrozen
{
    if BackingHealth &gt; obj_Player.statHealth / obj_Player.statMaxHealth * 100
    {
        BackingHealth -= 1;
        HealthDraining = true;
        alarm[0] = room_speed / 30;
    }
    else if BackingHealth &lt; obj_Player.statHealth / obj_Player.statMaxHealth * 100
    {
        BackingHealth = obj_Player.statHealth / obj_Player.statMaxHealth * 100;
    }
}
else
{
    alarm[0] = room_speed / 30;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Load Game
if env_path = ""
{
    show_debug_message("[DBG]: Created new file " + string(File) + ".");
    env_path = environment_get_variable("APPDATA") + "\Action_Platformer\" + string(File) + "\";
}
if not init
{
    if debug_mode
    {
        room_goto(TestRoom);
        instance_create(TestX, TestY, pc_Player);
    }
    else
    {
        room_goto(DefaultRoom);
        instance_create(DefaultX, DefaultY, pc_Player);
    }
    if not NewGame
    {
        load_game(File);
        r_current = roomFirst;
        if SaveRoom != noone
        {
            show_debug_message("[DBG]: The save room is " + room_get_name(SaveRoom) + ".");
            r_current = SaveRoom;
        }
    }
    init = true;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Load Room
if loadingRoom and not loadingRoomStarted
{
    loadingRoomStarted = true;
    alarm[3] = room_speed * 0.1;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Save Room
if savingRoom
{
    blackScreen = true;
    GameFrozen = true;
    r_next = room_next(r_current);
    if ds_list_find_value(string_split(room_get_name(r_next), "_"), 0) = "btl"
    {
        while ds_list_find_value(string_split(room_get_name(r_next), "_"), 0) = "btl"
        {
            r_current = room_next(r_current);
            r_next = room_next(r_current);
            show_debug_message("[SKP]: " + room_get_name(r_current));
        }
        r_current = r_next;
        r_next = room_next(r_current);
        room_goto(r_current);
    }
    else
    {
        r_current = save_room(r_current);
        if r_current = -1
        {
            room_goto(roomFirst)
            savingRoom = false;
            blackScreen = false;
            obj_GUI.GameFrozen = false;
            if obj_Menu.Quitting = 1
            {
                game_reset();
            }
            Saved = true;
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Complete Save
if Saved
{
    with msg_Messagebox
    {
        if ds_list_find_value(Messages, 0) = "Saving your game..."
        {
            if ds_list_find_value(Messages, 0) = CurrentMessage
            {
                Saved = false;
                instance_destroy();
            }
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Refresh Keybinds
set_keybinds(ord("W"), 
             ord("A"), 
             ord("S"), 
             ord("D"), 
             vk_space, 
             ord("E"), 
             vk_tab, 
             ord("Z"), 
             vk_shift, 
             ord("R"),
             ord("K"),
             mb_left,
             ord("G"));
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Animate Skill Points, Stat Points and Gold
statPointSubimage += (1/6);
skillPointSubimage += (1/6);
if (goldSubimage + 1)
{
    goldSubimage += (1/4);
    if goldSubimage = 15
    {
        goldSubimage = -1;
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Get Cursor Position
cursor_x = window_mouse_get_x();
cursor_y = window_mouse_get_y();
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Check Player Death
if not obj_Menu.MenuShown
{
    if BackingHealth &lt;= 0
    {
        game_reset();
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Set Debug
if kpDebug
{
    if Debug
    {
        Debug = false;
        Healthbars = true;
    }
    else if Healthbars
    {
        Healthbars = false;
    }
    else
    {
        Debug = true;
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Add Gold
if keyboard_check_pressed(ord("V"))
{
    change_gold(1);
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Refresh Cursor Position
cursor_x = window_mouse_get_x();
cursor_y = window_mouse_get_y();
cursor_sprite = ani_CursorSprite;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Create Tooltip
slotHover = false;
if instance_exists(obj_Player)
{
    create_tooltip("Health", 5, 4, 185, 11, 0, 0);
    create_tooltip("Mana", 9, 17, 113, 4, 0, 0);
    if not obj_Menu.MenuShown
    {
        create_tooltip("Stamina", 12, 23, 73, 2, 0, 0);
        create_tooltip("Experience", 5, 33, 89, 2, 0, 0);
        if not slotHover
        {
            tooltipShown = false;
            tooltipName = "";
            tooltipDescription = "";
            tooltipStats = "";
        }
    }
    else
    {
        tooltipShown = false;
        tooltipName = "";
        tooltipDescription = "";
        tooltipStats = "";
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Set Cursor Sprite
cursor_sprite = ani_CursorSprite;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Check Backing Resources
if not GameFrozen
{
    if BackingHealth != obj_Player.statHealth / obj_Player.statMaxHealth * 100 and not HealthDraining
    {
        alarm[0] = room_speed / 30;
        HealthDraining = true;
    }
    if BackingMana != obj_Player.statMana / obj_Player.statMaxMana * 100 and not ManaDraining
    {
        alarm[1] = room_speed / 30;
        ManaDraining = true;
    }
    if BackingStamina != obj_Player.statStamina / obj_Player.statMaxStamina * 100 and not StaminaDraining
    {
        alarm[2] = room_speed / 30;
        StaminaDraining = true;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Black Screen
if blackScreen
{
    draw_rectangle_colour(0, 0, view_wport[0], view_hport[0], c_black, c_black, c_black, c_black, false);
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw Health, Mana and Stamina
if instance_exists(obj_Player)
{
    //Draw Backing Bars
    draw_set_alpha(0.5);
    draw_healthbar(5, 4, 190, 16, BackingHealth, c_gray, c_white, c_white, 0, false, false);
    draw_healthbar(9, 17, 122, 21, BackingMana, c_gray, c_white, c_white, 0, false, false);
    if not obj_Menu.MenuShown
    {
        draw_healthbar(12, 23, 85, 24, BackingStamina, c_gray, c_white, c_white, 0, false, false);
    }
    draw_set_alpha(1);
    //Draw Health and Mana Bars
    draw_healthbar(5, 4, 190, 16, (obj_Player.statHealth / obj_Player.statMaxHealth) * 100, c_gray, c_red, c_red, 0, false, false);
    draw_healthbar(9, 17, 122, 21, (obj_Player.statMana / obj_Player.statMaxMana) * 100, c_gray, c_blue, c_blue, 0, false, false);
    if not obj_Menu.MenuShown
    {
        draw_healthbar(12, 23, 85, 24, (obj_Player.statStamina / obj_Player.statMaxStamina) * 100, c_gray, c_green, c_green, 0, false, false);
    }
    //Write Current Health and Mana
    draw_text_ext_transformed_colour(9, -4, obj_Player.statHealth, 0, 96, 0.20, 0.20, 0, c_white, c_white, c_white, c_white, 1);
    //draw_text_ext_transformed_colour(11, 10, obj_Player.statMana, 0, 96, 0.15, 0.15, 0, c_white, c_white, c_white, c_white, 1);
    //draw_set_font(fnt_SystemFont);
    //Write Maximum Health and Mana
    draw_set_halign(fa_right);
    draw_text_ext_transformed_colour(186, -4, obj_Player.statMaxHealth, 0, 96, 0.20, 0.20, 0, c_white, c_white, c_white, c_white, 1);
    //draw_text_ext_transformed_colour(70, 10, obj_Player.statMaxMana, 0, 96, 0.15, 0.15, 0, c_white, c_white, c_white, c_white, 1);
    draw_set_halign(fa_left);
    
    //Draw Health and Mana Containers
    draw_sprite(spr_Healthbar, 0, 2, 2);
    draw_sprite(spr_Manabar, 0, 4, 17);
    if not obj_Menu.MenuShown
    {
        draw_sprite(spr_Staminabar, 0, 4, 17);
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw Experience and Level Gains
if instance_exists(obj_Menu)
{
    if not obj_Menu.MenuShown
    {
        if instance_exists(obj_Player)
        {
            //Draw Experience Bar and Container
            draw_healthbar(5, 33, 94, 35, (obj_Player.EXP / obj_Player.ToNextLevel) * 100, c_gray, c_lime, c_lime, 0, false, false);
            draw_sprite(spr_Expbar, 0, 4, 32);
            //Write Player Level
            draw_set_halign(fa_middle);
            draw_text_ext_transformed_colour(20, 30, obj_Player.Level, 0, 96, 0.1625, 0.1625, 0, c_white, c_white, c_white, c_white, 1);
            draw_set_halign(fa_left);
            
            //Draw Stat and Skill Points
            if obj_Player.StatPoints &gt; 0
            {
                draw_sprite(ani_StatPoint, statPointSubimage, 36, 40);
                draw_text_ext_transformed_colour(46, 32, floor(obj_Player.StatPoints), 0, 96, 0.1625, 0.1625, 0, c_white, c_white, c_white, c_white, 1);
            }
            if obj_Player.SkillPoints &gt; 0
            {
                draw_sprite(ani_SkillPoint, skillPointSubimage, 64, 40);
                draw_text_ext_transformed_colour(74, 32, floor(obj_Player.SkillPoints), 0, 96, 0.1625, 0.1625, 0, c_white, c_white, c_white, c_white, 1);
            }
            draw_sprite(ani_GoldIcon, max(0, round(goldSubimage)), 36, 56);
            draw_text_ext_transformed_colour(46, 48, Gold, 0, 96, 0.1625, 0.1625, 0, c_white, c_white, c_white, c_white, 1);
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw Information
if Debug
{
    switch get_switch(BarrierSwitch)
    {
        case true:  BarrierColour = c_red; break;
        case false: BarrierColour = c_blue; break;
    }    
    draw_text_transformed_colour(2, 288, "E:" + string(instance_count) + "/B:", 0.1625, 0.1625, 0, c_black, c_black, c_black, c_black, 1);
    draw_text_transformed_colour(2 + (string_width("E:" + string(instance_count) + "/B:") * 0.1625), 288, BarrierSwitch, 0.1625, 0.1625, 0, BarrierColour, BarrierColour, BarrierColour, BarrierColour, 1);
    draw_text_transformed_colour(2, 304, env_path, 0.1625, 0.1625, 0, c_black, c_black, c_black, c_black, 1);
    show_debug_overlay(true);
}
else
{
    show_debug_overlay(false);
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw Tooltip
if tooltipShown
{
    draw_tooltip(obj_GUI.cursor_x, obj_GUI.cursor_y, 1);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
