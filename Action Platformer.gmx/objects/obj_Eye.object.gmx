<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_EyeRolling</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Initialize Variables
image_angle = 0;
Weight = 1;
Collided = false;
Rising = false;
randomize();
RollSpeed = choose(-1, 1) * 4;
hSpeed = 0;
vSpeed = 0;
ReadyToRise = false;
InLiquid = false;
Sinking = false;
Invulnerable = false;
Immovable = false;
Dead = false;

selfGravity = Weight * (Gravity * 0.5);
selfFriction = 0.075;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Initialize Drops
lootDrops = ds_list_create();
ds_list_add(lootDrops,
        itm_GolranEye, 1, 1);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Make Vulnerable
Invulnerable = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Rise To Golem
if instance_exists(obj_Golem) and not obj_Golem.Dead
{
    var targetX, targetY;
    targetX = obj_Golem.x;
    targetY = obj_Golem.y;
    if abs(point_distance(x, y, targetX, targetY)) &gt; 8
    {
        bDir = point_direction(x, y, targetX, targetY) + 90;
        hSpeed = 5 * sin(other.bDir * pi / 180);
        vSpeed = 5 * cos(other.bDir * pi / 180);
        alarm[0] = room_speed * 0.05
    }
    else
    {
        with obj_Golem
        {
            alarm[7] = room_speed * 2;
            Rising = true;
            SkullHealth = MaxSkullHealth;
            Collided = false;
            Invulnerable = false;
            CanFireRepulsor = true;
        }
        instance_destroy();
    }
}
else
{
    sprite_index = ani_GolemEyeDying;
    image_index = 0;
    image_speed = 0.25 * obj_GUI.FrameModulus;
    Dead = true;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Environmental Checks
OnGround = place_meeting(x, y+1, obj_Block);
InLiquid = place_meeting(x, y, par_Liquid);
OnSlope = place_meeting(x, y+4, obj_SlopeTL);
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Collision
if not obj_GUI.GameFrozen
{
    if place_meeting(x+hSpeed, y, obj_Block)
    {
        yPlus = 0;
        while place_meeting(x+hSpeed, y-yPlus, obj_Block) and yPlus &lt;= TileDimensions
        {
            yPlus += 1;
        }
        if place_meeting(x+hSpeed, y-yPlus, obj_Block)
        {
            while !place_meeting(x+sign(hSpeed), y, obj_Block)
            {
                x += sign(hSpeed);
            }
            hSpeed = 0;
        }
        else
        {
            y -= yPlus;
        }
    }
    
    if place_meeting(x, y+vSpeed, obj_Block)
    {
        if !place_meeting(x, y, obj_LedgeMiddle)
        {
            while !place_meeting(x, y+sign(vSpeed), obj_Block)
            {
                y += sign(vSpeed);
            }
        }
        vSpeed = 0
        if Collided = false
        {
            Collided = true;
            hSpeed = RollSpeed;
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Fall by Gravity
if not obj_GUI.GameFrozen
{
    if not Rising
    {
        selfGravity = Weight * (Gravity * 0.5);
        if InLiquid
        {
            if not Sinking
            {
                Sinking = true;
                vSpeed = 1;
            }
            selfGravity = Weight * (Gravity * 0.5) * (2 / instance_nearest(x, y, par_Liquid).Density);
        }
        else
        {
            Sinking = false;
        }
        G = selfGravity * obj_GUI.FrameModulus;
        if not OnGround
        {
            vSpeed += G;
            vSpeed = min(max(vSpeed, -10), 10);
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Roll
if not obj_GUI.GameFrozen
{
    image_angle -= sign(hSpeed) * 10
    dSpeed = sign(hSpeed) * selfFriction;
    hSpeed -= dSpeed;
    if abs(hSpeed) &lt;= 0.5
    {
        hSpeed = 0;
        if ReadyToRise = false
        {
            ReadyToRise = true;
            alarm[0] = room_speed * 10;
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Change Character Position
if not obj_GUI.GameFrozen
{
    x += hSpeed
    y += vSpeed
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_PlayerArrow">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Knockback
if instance_exists(obj_Golem)
{
    damage_enemy(other.Damage, other, obj_Golem, self, -1, true);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="htb_Scythe">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Knockback
if instance_exists(obj_Golem)
{
    damage_enemy(other.Damage, other, obj_Golem, self, -1, false);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="htb_Shield">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="htb_Claws">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Knockback
if instance_exists(obj_Golem)
{
    damage_enemy(other.Damage, other, obj_Golem, self, 10, false);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="htb_Melee">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Knockback
if instance_exists(obj_Golem)
{
    damage_enemy(other.Damage, other, obj_Golem, self, -1, false);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="7">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Destroy Instance if dead
if Dead
{
    instance_destroy();
    calculate_item_drop(lootDrops);
    set_switch(ds_map_find_value(obj_GUI.bossSwitches, "Golran"), true);
    obj_Tenebrane_door.alarm[1] = room_speed;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw Self
draw_self();
if Invulnerable = true
{
    shader_set(shd_WhitedOut);
    draw_self();
    shader_reset();
}
//draw_text_ext_transformed_colour(x - 90, y - 24, string(hSpeed), 0, 96, 0.20, 0.20, 0, c_black, c_black, c_black, c_black, 1);
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw Bounding Box
if obj_GUI.Debug
{
    draw_set_alpha(0.5);
    draw_rectangle_colour(bbox_left, bbox_top, bbox_right, bbox_bottom, c_lime, c_lime, c_lime, c_lime, false);
    draw_set_alpha(1);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
