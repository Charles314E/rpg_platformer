<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>ani_DarkBall</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>obj_Enemy</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///event_inherited()
event_inherited();
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Initialize Attributes
Weight = 4;
NoGravity = true;
Immovable = true;
hSpeed = 2;
vSpeed = 2;
image_speed = 0.5;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Initialize Statistics
statStrength = 0;
statVitality = 0;
statDexterity = 0;
statFortitude = 9999;
statWisdom = 0;
statMagic = 0;

enemyName = "Sphreye";
lootExp = 2;
lootGold = 1;
set_statistics(self, true);

baseHealth = 5;
baseMana = 0;

statMaxHealth = baseHealth;
statHealth = statMaxHealth;
statMaxMana = baseMana;
statMana = statMaxMana;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Initialize States
stateNormal = sprite_index;
frameNormal = 0.1;
stateDead = ani_DarkBall_death;
frameDead = 0.3333;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Initialize Drops
lootDrops = ds_list_create();
ds_list_add(lootDrops,
        itm_EnergyCore, 0.1, 1);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Refresh Statistics
set_statistics(self, false)

if (baseHealth + 1)
{
    statMaxHealth = baseHealth;
}
if (baseMana + 1)
{
    statMaxMana = baseMana;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Set Animation Frame
if !Dead and not obj_GUI.GameFrozen
{
    if Dead
    {
        sprite_index = stateDead;
        image_speed = frameDead * obj_GUI.FrameModulus;
    }
    else
    {
        sprite_index = stateNormal;
        image_speed = frameNormal * obj_GUI.FrameModulus;
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Change Character Position
if not obj_GUI.GameFrozen
{
    x += hSpeed
    y += vSpeed
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Double Attack Damage
if !Dead
{
    if DoubleAttacked = 0
    {
        DoubleAttacked = -1;
        statHealth -= x2AttackDamage;
        with instance_create(x, y, txt_Damage)
        {
            Damage = other.x2AttackDamage;
        }
    }
    else
    {
        DoubleAttacked -= 1;
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Kill Entity
if sfx_dead != noone
{
    audio_sound_gain(sfx_dead, volume, 1);
}

if obj_GUI.Debug
{
    if obj_GUI.kpKill and not Unkillable
    {
        statHealth = 0;
        if not Mask = noone
        {
            with Mask
            {
                instance_destroy();
            }
        }
        alarm[10] = room_speed * 0.2;
    }
}

if statHealth &lt; 1 and not Dead
{
    if obj_Controller.Encounter != "Random"
    {
        if instance_exists(obj_Player)
        {
            gain_experience(self);
        }
        calculate_gold_drop(lootGold);
    }
    Vulnerable = false;
    Dead = true;
    Invulnerable = true;
    if NoGravity
    {
        NoGravity = false;
    }
    sprite_index = stateDead;
    if deadSound != noone
    {
        sfx_dead = audio_play_sound(deadSound, 1, false);
        audio_sound_gain(sfx_dead, volume, 1);
    }
    image_index = 0;
    image_speed = frameDead * obj_GUI.FrameModulus;
} 
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_Block">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Bounce Off Walls
switch other.object_index
{
    case obj_SlopeTL:
        if sign(hSpeed) = 0 and sign(vSpeed) = -1
        {
            hSpeed = abs(hSpeed);
            vSpeed = 0;
        }
        else if sign(hSpeed) = -1 and sign(vSpeed) = -1
        {
            var n = choose(0, 1);
            if n = 0
            {
                hSpeed = abs(hSpeed);
                vSpeed = 0;
            }
            else
            {
                hSpeed = 0;
                vSpeed = abs(vSpeed);
            }
        }
        else if sign(hSpeed) = -1 and sign(vSpeed) = 0
        {
            hSpeed = 0;
            vSpeed = abs(vSpeed);
        }
        break;
    case obj_SlopeTR:
        if sign(hSpeed) = 0 and sign(vSpeed) = -1
        {
            hSpeed = -abs(hSpeed);
            vSpeed = 0;
        }
        else if sign(hSpeed) = 1 and sign(vSpeed) = -1
        {
            var n = choose(0, 1);
            if n = 0
            {
                hSpeed = -abs(hSpeed);
                vSpeed = 0;
            }
            else
            {
                hSpeed = 0;
                vSpeed = abs(vSpeed);
            }
        }
        else if sign(hSpeed) = 1 and sign(vSpeed) = 0
        {
            hSpeed = 0;
            vSpeed = abs(vSpeed);
        }
        break;
    case obj_SlopeBL: 
        if sign(hSpeed) = 0 and sign(vSpeed) = 1
        {
            hSpeed = abs(hSpeed);
            vSpeed = 0;
        }
        else if sign(hSpeed) = -1 and sign(vSpeed) = 1
        {
            var n = choose(0, 1);
            if n = 0
            {
                hSpeed = abs(hSpeed);
                vSpeed = 0;
            }
            else
            {
                hSpeed = 0;
                vSpeed = -abs(vSpeed);
            }
        }
        else if sign(hSpeed) = -1 and sign(vSpeed) = 0
        {
            hSpeed = 0;
            vSpeed = -abs(vSpeed);
        }
        break;
    case obj_SlopeBR: 
        if sign(hSpeed) = 0 and sign(vSpeed) = 1
        {
            hSpeed = -abs(hSpeed);
            vSpeed = 0;
        }
        else if sign(hSpeed) = 1 and sign(vSpeed) = 1
        {
            var n = choose(0, 1);
            if n = 0
            {
                hSpeed = -abs(hSpeed);
                vSpeed = 0;
            }
            else
            {
                hSpeed = 0;
                vSpeed = -abs(vSpeed);
            }
        }
        else if sign(hSpeed) = 1 and sign(vSpeed) = 0
        {
            hSpeed = 0;
            vSpeed = -abs(vSpeed);
        }
        break;
    default:
        if place_meeting(x+sign(hSpeed), y, obj_Block) or x &lt;= 1 or x &gt;= room_width - 1
        {
            hSpeed *= -1;
        }
        if place_meeting(x, y+sign(vSpeed), obj_Block) or y &lt;= 1 or y &gt;= room_height - 1
        {
            vSpeed *= -1;
        }
        break;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_Player">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>other</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Knockback
if not (status("PARALYZE") + 1) and not Dead
{
    damage_player(noone, other, false);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
