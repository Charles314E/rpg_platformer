<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Initialize Variables
depth = -99;
Density = 2;
Texture = noone;
r1 = 255; g1 = 255; b1 = 255;
r2 = 255; g2 = 255; b2 = 255;
yy1List = ds_list_create();
yy2List = ds_list_create();
rippleList = ds_list_create();
for (i = 0; i &lt; sprite_width; i += 1)
{
    ds_list_add(yy1List, 0);
    ds_list_add(yy2List, 0);
    ds_list_add(rippleList, 0);
}
advancedWaves = false;
Instances = ds_list_create();
ds_list_add(Instances, par_Entity, obj_PlayerArrow);
K = 0.025;
D = 0.005;
S = 0.25;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Create Ambient Waves
if not obj_GUI.GameFrozen and advancedWaves
{
    ds_list_clear(yy1List);
    ds_list_clear(yy2List);
    for (theta = 0; theta &lt; sprite_width; theta += 1)
    {
        var a1, a2, w1, w2, wo, prec;
        a1 = 1;
        a2 = 0.75;
        w1 = 2;
        w2 = 2;
        wo = 0.5;
        prec = power(10, 7);
        
        var oTheta, sine1, sine2, sine3, sine4;
        oTheta = theta + (obj_Controller.Time / prec);
        sine1 = a1 * sin(((oTheta * w1) * pi) / 180);
        sine2 = a1 * sin((((oTheta + 1) * w1) * pi) / 180);
        oTheta += (obj_Controller.Time / prec) * wo;
        sine3 = a2 * sin(((oTheta * w2) * pi) / 180);
        sine4 = a2 * sin((((oTheta + 1) * w2) * pi) / 180);
        
        ds_list_add(yy1List, sine1 + sine3);
        ds_list_add(yy2List, sine2 + sine4);
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Create Ripples
if not obj_GUI.GameFrozen and advancedWaves
{
    var X, A, inst, LeftX, RightX;
    for (theta = 0; theta &lt; sprite_width; theta += 1)
    {
        inst = noone;
        for (i = 0; i &lt; ds_list_size(Instances); i += 1)
        {
            with ds_list_find_value(Instances, i)
            {
                if collision_point(other.x + other.theta, other.bbox_top, object_index, false, false)
                {
                    if inst = noone
                    {
                        other.inst = self;
                    }
                    else
                    {
                        if vSpeed &gt; other.inst.vSpeed
                        {
                            other.inst = self;
                        }
                    }
                }
            }
        }
        if inst
        {
            X = inst.vSpeed;
        }
        else
        {
            X = ds_list_find_value(rippleList, theta);
        }
        A = -K*X - D*X;
        X += A;
        for (i = 0; i &lt; 1; i += 1)
        {
            if theta &gt; 0
            {
                LeftX = ds_list_find_value(rippleList, theta - 1);
                LeftX += S * (X - LeftX);
                ds_list_replace(rippleList, theta - 1, LeftX);
            }
            if theta &lt; sprite_width - 1
            {
                RightX = ds_list_find_value(rippleList, theta + 1);
                RightX += S * (X - RightX);
                ds_list_replace(rippleList, theta + 1, RightX);
            }
        }
        ds_list_replace(rippleList, theta, X);
    }
    for (theta = sprite_width - 1; theta &gt;= 0; theta -= 1)
    {
        inst = collision_point(x + theta, bbox_top, par_Entity, false, false);
        if inst
        {
            X = inst.vSpeed * 3.2;
        }
        else
        {
            X = ds_list_find_value(rippleList, theta);
        }
        A = -K*X - D*X;
        X += A;
        for (i = 0; i &lt; 1; i += 1)
        {
            if theta &gt; 0
            {
                LeftX = ds_list_find_value(rippleList, theta - 1);
                LeftX += S * (X - LeftX);
                ds_list_replace(rippleList, theta - 1, LeftX);
            }
            if theta &lt; sprite_width - 1
            {
                RightX = ds_list_find_value(rippleList, theta + 1);
                RightX += S * (X - RightX);
                ds_list_replace(rippleList, theta + 1, RightX);
            }
        }
        ds_list_replace(rippleList, theta, X);
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw Waves
for (theta = 0; theta &lt; ds_list_size(yy1List); theta += 1)
{
    var xx, crest1, crest2, yy1, yy2, c1, c2;
    xx = x + theta;
    crest1 = ds_list_find_value(yy1List, theta) + ds_list_find_value(rippleList, theta);
    crest2 = ds_list_find_value(yy2List, theta) + ds_list_find_value(rippleList, theta);
    yy1 = y + crest1;
    yy2 = y + crest2;
    if Texture = noone
    {
        c1 = make_colour_rgb(r1, g1, b1);
        c2 = make_colour_rgb(r2, g2, b2);
        draw_set_alpha(0.2);
        draw_line_width_colour(xx, yy1, xx + 1, yy1 + sprite_height - crest1, 2, c1, c1);
        draw_set_alpha(0.4);
        draw_line_width_colour(xx, yy1, xx + 1, yy2, 2, c2, c2);
        draw_set_alpha(1);
    }
    else
    {
        for (i = 0; i &lt; (sprite_height - crest1 + 1) / 16; i += 1)
        {
            draw_sprite_part(Texture, 1, theta mod 16, 0, 1, 15, xx, yy1+((i+1)*15));
        }
        draw_sprite_part(Texture, 0, theta mod 16, 0, 1, 15, xx, yy1);       
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw Information
if obj_GUI.Debug
{
    draw_text_transformed(x, y, string(ds_list_find_value(yy1List, 0)) + "/" + string(ds_list_find_value(yy1List, ds_list_size(yy1List) - 1)), 0.1625, 0.1625, 0);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
