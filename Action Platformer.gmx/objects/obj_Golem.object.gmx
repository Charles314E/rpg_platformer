<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>ani_Skull</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>obj_Boss</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///event_inherited()
event_inherited();
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Initialize Attributes
image_speed = 0.5;
NoGravity = true;
Vulnerable = false;
Tracking = false;
Rising = false;
TargetX = obj_Player.x;
TargetY = obj_Player.y;
SlotX = x;
SlotY = y;
image_speed = 0.05;
bSpeed = 5;
Charging = -1;
ChargingRepulsor = -1;
Firing = false;
FiringRepulsor = false;
RepulsorTimer = -1;
RepulsorDuration = 0;
CanFireHands = true;
LockedOn = false;
BeamLength = 16;
BeamRotationSpeed = 8;
Section = 0;
Mask = htb_GolemSkull;
BeamCollided = false;
CanFireRepulsor = true;

MaxSkullHealth = 6;
SkullHealth = MaxSkullHealth;
TeethOffset = 0;
LosingTeeth = -1;
PupilOffset = 0;
SkullOffset = 0;

alarm[6] = room_speed * 5;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Initialize Statistics
if SkullHealth &gt; 0
{
    statStrength = 8;
    statVitality = 0;
    statDexterity = 4;
    statFortitude = 50;
    statWisdom = 0;
    statMagic = 8;
}
else
{
    statStrength = 0;
    statVitality = 0;
    statDexterity = 0;
    statFortitude = 18;
    statWisdom = 0;
    statMagic = 0;    
}

enemyName = "Golran";
enemyTitle = "The Temple Guardian";
lootExp = 150;
lootGold = 37;
set_statistics(self, true);

bossHealth = 200;
bossMana = 0;
statMaxHealth = bossHealth;
statHealth = statMaxHealth;
statMaxMana = bossMana;
statMana = statMaxMana;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Initialize Traits
Solid = true;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Initialize States
stateDead = ani_Golem_death;
frameDead = 0.5;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Initialize Drops
lootDrops = ds_list_create();
ds_list_add(lootDrops,
        itm_GolranTooth, 1, 6);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>htb_GolemSkull</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Destroy Mask
instance_destroy();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="7">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Stop Rising
if not obj_GUI.GameFrozen
{
    vSpeed = 0;
    Rising = false;
    x = SlotX;
    y = SlotY;
    alarm[6] = room_speed * 3;
}
else
{
    alarm[7] = room_speed * 0.025;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="6">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Attack
if not obj_GUI.GameFrozen and CanFireHands
{
    if SkullHealth &gt; 0
    {
        if FiringRepulsor
        {
            attackChance = 1;
        }
        else
        {
            attackChance = round(random_range(1, 10)) + round(((statMaxHealth - statHealth) / statMaxHealth) * 5);
        }
        if attackChance &lt;= 8
        {
            if sign(obj_Player.x - x) = 1
            {
                instance_create(obj_Player.x - 128, obj_Player.y, obj_GolemHand);
            }
            else if sign(obj_Player.x - x) = -1
            {
                instance_create(obj_Player.x + 128, obj_Player.y, obj_GolemHand);
            }
            alarm[6] = room_speed * 3;
            if FiringRepulsor
            {
                alarm[6] = room_speed * 1.5;
            }
        }
        else
        {
            Tracking = true;
            Charging = 0;
            audio_play_sound(sfx_GolranCharging, 1, false);
            audio_sound_gain(sfx_GolranCharging, 1, 1);
            image_index = 0;
            image_speed = FrameModulus * 0.25;
            alarm[2] = room_speed * 1.5;
        }
    }
}
else
{
    alarm[6] = room_speed * 5;
    if FiringRepulsor
    {
        alarm[6] = room_speed * 1.5;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="5">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Fire Repulsor Beam
var beam_list;
beam_list = create_beam(obj_RepulsorBeam, self, obj_Player, x, y + 64, 16, 4, 580, 5, 0.025, 6, 3);
FiringRepulsor = ds_list_find_value(beam_list, 0);
RepulsorDuration = ds_list_find_value(beam_list, 2);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Start Charging Repulsor Beam
if not obj_GUI.GameFrozen
{
    x = room_width * 0.5;
    y = 96;
    ChargingRepulsor = 0;
    audio_play_sound(sfx_GolranCharging2, 1, false);
    audio_sound_gain(sfx_GolranCharging2, 1, 1);
    FiringRepulsor = false;
    Section = 0;
    alarm[5] = room_speed;
    alarm[6] = room_speed * 4;
}
else
{
    alarm[4] = room_speed * 0.05;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Fire Beam
var beam_list;
beam_list = create_beam(obj_Beam, self, obj_Player, TargetX, TargetY, 16, 4, 70, 3, 0.025, 6, 3);
Firing = ds_list_find_value(beam_list, 0);
LockedOn = ds_list_find_value(beam_list, 1);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Lock On
if not obj_GUI.GameFrozen
{
    if SkullHealth &gt; 0
    {
        if !Dead and not obj_GUI.GameFrozen
        {
            if LockedOn = true
            {
                alarm[3] = room_speed * 0.05;
            }
        }
    }
}
else
{
    alarm[2] = room_speed * 0.05;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///event_inherited()
event_inherited();
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Collision
if not obj_GUI.GameFrozen
{
    if SkullHealth &lt; 1
    {
        if not Incorporeal and Solid
        {
            if place_meeting(x+hSpeed, y, obj_Block)
            {
                yPlus = 0;
                while place_meeting(x+hSpeed, y-yPlus, obj_Block) and yPlus &lt;= TileDimensions
                {
                    yPlus += 1;
                }
                if place_meeting(x+hSpeed, y-yPlus, obj_Block)
                {
                    while !place_meeting(x+sign(hSpeed), y, obj_Block)
                    {
                        x += sign(hSpeed);
                    }
                    if object_is_ancestor(self, obj_Player)
                    {
                        if abs(iSpeed) = 0
                        {
                            hSpeed = 0;
                        }
                    }
                    else
                    {
                        hSpeed = 0;
                    }
                }
                else
                {
                    y -= yPlus;
                }
            }
            
            if place_meeting(x, y+vSpeed, obj_Block) and not place_meeting(x, y+vSpeed, Mask)
            {
                if !place_meeting(x, y, obj_LedgeMiddle)
                {
                    while !place_meeting(x, y+sign(vSpeed), obj_Block)
                    {
                        y += sign(vSpeed);
                    }
                }
                vSpeed = 0
                if Collided = false
                {
                    shake_camera(16, 0.9);
                    alarm[0] = room_speed / 6;
                    Collided = true;
                    instance_create(x, y, obj_Eye);
                }
            }
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Refresh Statistics
if not obj_GUI.GameFrozen
{
    if SkullHealth &gt; 0
    {
        statStrength = 8;
        statVitality = 0;
        statDexterity = 4;
        statFortitude = 50;
        statWisdom = 0;
        statMagic = 8;
        NoGravity = true;
        if not instance_exists(htb_GolemSkull)
        {
            instance_create(x, y, htb_GolemSkull);
        }
    }
    else
    {
        statStrength = 0;
        statVitality = 0;
        statDexterity = 0;
        statFortitude = 0;
        statWisdom = 0;
        statMagic = 0;  
        NoGravity = false;
        if instance_exists(htb_GolemSkull)
        {
            with htb_GolemSkull
            {
                instance_destroy();
            }
        }
    }
    set_statistics(self, false);
    statMaxHealth = bossHealth;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Ensure Position
image_xscale = 1;
image_yscale = 1;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Offset Skull, Teeth and Pupil
if not obj_GUI.GameFrozen
{
    switch round(image_index)
    {
        case 0: SkullOffset = 0; break;
        case 1: SkullOffset = -1; break;
        case 2: SkullOffset = -1; break;
        case 3: SkullOffset = -2; break;
        case 4: SkullOffset = -2; break;
        case 5: SkullOffset = -2; break;
        case 6: SkullOffset = -1; break;
        case 7: SkullOffset = -1; break;
        case 8: SkullOffset = 0; break;
        default: SkullOffset = 1;
    }
    
    switch round(image_index)
    {
        case 10: TeethOffset = 1; break;
        case 11: TeethOffset = 2; break;
        case 12: TeethOffset = 2; break;
        case 13: TeethOffset = 3; break;
        case 14: TeethOffset = 3; break;
        case 15: TeethOffset = 2; break;
        default: TeethOffset = 0;
    }
    
    switch round(image_index)
    {
        case 2: PupilOffset = 1; break;
        case 3: PupilOffset = 1; break;
        case 4: PupilOffset = 2; break;
        case 5: PupilOffset = 2; break;
        case 6: PupilOffset = 1; break;
        case 7: PupilOffset = 1; break;
        case 8: PupilOffset = -1; break;
        case 9: PupilOffset = -1; break;
        case 10: PupilOffset = -2; break;
        case 11: PupilOffset = -2; break;
        case 12: PupilOffset = -1; break;
        case 13: PupilOffset = -1; break;
        default: PupilOffset = 0;
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Lose Tooth
if not obj_GUI.GameFrozen
{
    var CollidedWithLeft, CollidedWithRight;
    var Left1, Left2, Right1, Right2;
    Left1 = collision_line(x-19, y-16+SkullOffset, x-29, y+5+SkullOffset, obj_GolemHand, true, true);
    Left2 = collision_line(x-20, y-16+SkullOffset, x-30, y+5+SkullOffset, obj_GolemHand, true, true);
    CollidedWithLeft = Left1 or Left2;
    Right1 = collision_line(x+19, y-16+SkullOffset, x+29, y+5+SkullOffset, obj_GolemHand, true, true);
    Right2 = collision_line(x+20, y-16+SkullOffset, x+30, y+5+SkullOffset, obj_GolemHand, true, true);
    CollidedWithRight = Right1 or Right2;
    
    if CollidedWithLeft or CollidedWithRight
    {
        if not Invulnerable
        {
            RepulsorChance = round(random_range(1, 20)) + ((MaxSkullHealth - SkullHealth) * 2);
            Invulnerable = true;
            if RepulsorChance &gt;= 0 and SkullHealth &gt; 1 and CanFireRepulsor
            {
                alarm[4] = room_speed * 1;
                alarm[1] = room_speed * 10;
                CanFireRepulsor = false;
            }
            else
            {
                alarm[1] = room_speed * 0.5;
            }
            LosingTeeth = 0;
            SkullHealth -= 1;
        }
    }
    if LosingTeeth &gt;= 0
    {
        if LosingTeeth &lt; 15
        {
            LosingTeeth += 1
        }
        else
        {
            LosingTeeth = -1
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Track Player
if not obj_GUI.GameFrozen
{
    if !Dead
    {
        if SkullHealth &gt; 0
        {
            if not (ChargingRepulsor or FiringRepulsor)
            {
                if instance_exists(obj_Player)
                {
                    Tracking = true;
                    if not LockedOn and Firing
                    {
                        Tracking = false;
                        TargetX += (obj_Player.x - x) * (BeamRotationSpeed * 0.1);
                        TargetY += (obj_Player.y - y) * (BeamRotationSpeed * 0.1);
                    }
                    else
                    {
                        TargetX = obj_Player.x;
                        TargetY = obj_Player.y;
                    }
                }
            }
            else
            {
                TargetX = x;
                TargetY = y + 64;            
            }
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Charge Up Beams
if not obj_GUI.GameFrozen
{
    if !Dead
    {
        CanFireHands = true;
        if Charging &gt;= 0 and not (ChargingRepulsor &gt;= 0 or FiringRepulsor)
        {
            Charging += 1;
            if Charging = 140
            {
                LockedOn = true;
                alarm[2] = room_speed * 0.1;
            }
            if Charging &gt;= 160
            {
                Charging = -1;
            }
        }
        if ChargingRepulsor &gt;= 0
        {
            ChargingRepulsor += 1;
            if ChargingRepulsor = 140
            {
                alarm[9] = room_speed * 0.3;
            }
            if ChargingRepulsor &gt;= 160
            {
                ChargingRepulsor = -1;
            }
        }
        if RepulsorTimer != -1
        {
            RepulsorTimer += 1;
            if RepulsorTimer &gt;= RepulsorDuration
            {
                RepulsorTimer = -1;
                alarm[6] = room_speed * 3;
            }
            else if RepulsorTimer &gt;= RepulsorDuration - (room_speed * 3)
            {
                CanFireHands = false;
            }
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Set Animation Speed
if not obj_GUI.GameFrozen
{
    image_speed = 0.5;
}
else
{
    image_speed = 0;
}

image_alpha = 1;
if instance_exists(obj_Eye)
{
    image_alpha = 0.75;
    image_index = 0;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Rise
if Rising
{
    vSpeed = -1.5;
    if distance_to_point(SlotX, SlotY) &lt; abs(vSpeed)
    {
        alarm[7] = 1;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_PlayerArrow">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="spl_Fireball">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="htb_Scythe">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="htb_Shield">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="htb_Claws">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="htb_Axe">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="htb_Melee">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw Self
if not instance_exists(obj_Eye)
{
    var ax, ay, eDist, eDir;
    draw_sprite_ext(ani_Eyeball, -1, x, y, 1, 1, 0, c_white, image_alpha);
    eDist = point_distance(x, y, TargetX, TargetY);
    eDir = point_direction(x, y, TargetX, TargetY) + 90;
    ax = max(0, min(eDist, 3)) * sin(eDir * pi / 180);
    ay = max(0, min(eDist, 3)) * cos(eDir * pi / 180);
    if Charging = -1 and ChargingRepulsor = -1 and not Firing and not FiringRepulsor and not LockedOn
    {
        draw_sprite_ext(ani_Pupil, -1, x + ax, y + ay, 1, 1, 0, c_white, image_alpha);
        draw_sprite_ext(ani_Eyelids, -1, x, y, 1, 1, 0, c_white, image_alpha);
    }
    else if ChargingRepulsor &gt;= 0 or FiringRepulsor
    {
        if round(ChargingRepulsor * (0.25 * FrameModulus)) &gt;= 5 or FiringRepulsor
        {
            draw_sprite_ext(ani_EyeballChargingRepulsor, -1, x, y, 1, 1, 0, c_white, image_alpha);
        }
        if FiringRepulsor
        {
            draw_sprite_ext(ani_PupilChargingRepulsor, 11, x + ax, y + ay + PupilOffset, 1, 1, 0, c_white, image_alpha);
        }
        else
        {
            draw_sprite_ext(ani_PupilChargingRepulsor, min(11, ChargingRepulsor * (0.25 * FrameModulus)), x + ax, y + ay + PupilOffset, 1, 1, 0, c_white, image_alpha);
        }
    }
    else if Charging &gt;= 0 or Firing
    {
        if round(Charging * (0.25 * FrameModulus)) &gt;= 5 or Firing or LockedOn
        {
            draw_sprite_ext(ani_EyeballCharging, -1, x, y, 1, 1, 0, c_white, image_alpha);
        }
        if Firing or LockedOn
        {
            draw_sprite_ext(ani_PupilCharging, 11, x + ax, y + ay + PupilOffset, 1, 1, 0, c_white, image_alpha);
        }
        else
        {
            draw_sprite_ext(ani_PupilCharging, min(11, Charging * (0.25 * FrameModulus)), x + ax, y + ay + PupilOffset, 1, 1, 0, c_white, image_alpha);
        }
    }
}
draw_self();
if obj_GUI.Debug
{
    
    if not instance_exists(obj_Eye)
    {
        draw_line_colour(x-19, y-16+SkullOffset, x-29, y+5+SkullOffset, c_lime, c_lime);
        draw_line_colour(x-20, y-16+SkullOffset, x-30, y+5+SkullOffset, c_lime, c_lime);
        draw_line_colour(x+19, y-16+SkullOffset, x+29, y+5+SkullOffset, c_lime, c_lime);
        draw_line_colour(x+20, y-16+SkullOffset, x+30, y+5+SkullOffset, c_lime, c_lime);
    }
    if Invulnerable
    {
        shader_set(shd_WhitedOut);
        draw_sprite_ext(ani_Eyeball, -1, x, y, 1, 1, 0, c_white, image_alpha);
        shader_reset();
    }
}
/*if Invulnerable
{
    shader_set(shd_WhitedOut);
    draw_self();
    shader_reset();
}*/
for (i = 0; i &lt; SkullHealth; i += 1)
{
    draw_sprite(ani_Tooth, 0, x - 21 + (i * 8), y + TeethOffset + 15);
}
if LosingTeeth &gt;= 0
{
    draw_sprite(ani_Tooth, LosingTeeth, x - 21 + (SkullHealth * 8), y + TeethOffset + 15);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="75">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Kill the Skull and the Eye
SkullHealth = 0;
currentHealth = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
