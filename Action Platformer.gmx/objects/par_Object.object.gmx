<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Initialize Variables
CanInteract = noone;
alpha = 1;
Back = false;
depth = 1;
mouseHover = mouse_x = min(max(x, mouse_x), x + sprite_width) and mouse_y = min(max(y, mouse_y), y + sprite_height);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Highlight Cursor
if mouseHover and not obj_GUI.GameFrozen
{
    cursor_sprite = ani_CursorSprite_active;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Interact
mouseHover = mouse_x = min(max(bbox_left, mouse_x), bbox_right) and mouse_y = min(max(bbox_top, mouse_y), bbox_bottom);
if ((obj_GUI.kpInteract and obj_Player.CanInteract) or (obj_GUI.mbInteract and mouseHover and distance_to_object(obj_Player) &lt;= 128))
{
    if CanInteract != noone
    {
        if CanInteract
        {
            if collision_rectangle(x, y, x+sprite_width, y+sprite_height, obj_Player, false, true)
            {
                alarm[0] = 1;
            }
        }
    }
    else
    {
        if collision_rectangle(x, y, x+sprite_width, y+sprite_height, obj_Player, false, true)
        {
            alarm[0] = 1;
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw Self
if ((collision_rectangle(x, y, x+sprite_width, y+sprite_height, obj_Player, false, true) and obj_Player.CanInteract) or (mouseHover and distance_to_object(obj_Player) &lt;= 128)) and not obj_GUI.GameFrozen
{
    if alpha &lt; 1
    {
        if CanInteract != noone
        {
            if CanInteract
            {
                shader_set(shd_Outline);
                draw_sprite_ext(sprite_index, image_index, x, y, 1, 1, 0, c_white, alpha);
                shader_reset();
            }
        }
        else
        {
            shader_set(shd_Outline);
            draw_sprite_ext(sprite_index, image_index, x, y, 1, 1, 0, c_white, alpha);
            shader_reset();
        }
    }
    else
    {
        if CanInteract != noone
        {
            if CanInteract
            {
                shader_set(shd_WhitedOut);
                draw_sprite_stretched_ext(sprite_index, image_index, x-1, y-1, sprite_width + 2, sprite_height + 2, c_white, alpha);
                shader_reset();
            }
        }
        else
        {
            shader_set(shd_WhitedOut);
            draw_sprite_stretched_ext(sprite_index, image_index, x-1, y-1, sprite_width + 2, sprite_height + 2, c_white, alpha);
            shader_reset();
        }
    }
}
draw_self();
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw Bounding Box
if obj_GUI.Debug
{
    draw_set_alpha(0.5);
    draw_rectangle_colour(bbox_left, bbox_top, bbox_right, bbox_bottom, c_lime, c_lime, c_lime, c_lime, false);
    draw_set_alpha(1);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
