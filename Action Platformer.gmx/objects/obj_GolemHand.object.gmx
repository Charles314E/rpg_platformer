<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>ani_Hand</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>par_Entity</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///event_inherited()
event_inherited();
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Initialize Attributes
selfFriction = 0.25;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Initialize Variables
dir = sign(obj_Player.x - x);
image_xscale = dir;
sprite_index = ani_Hand;
Fired = false;
Collided = false;
Forming = true;
Reversing = false;
Dead = false;
hitSound = sfx_GolranHandHit;
switch obj_GUI.GameFrozen
{
    case false: image_speed = 0.25; break;
    case true:  image_speed = 0; break;
}
alarm[0] = room_speed;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Initialize Statistics
statStrength = 10;
statVitality = 0;
statDexterity = 5;
statFortitude = 999;
statWisdom = 0;
statMagic = 5;

lootExp = 2;
set_statistics(self, true);

statMaxHealth = 9999;
statHealth = statMaxHealth;
statMaxMana = 0;
statMana = statMaxMana;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Fire
if not Fired
{
    Fired = true;
    vSpeed = 0;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Initialize Statistics
statStrength = 10;
statVitality = 0;
statDexterity = 5;
statFortitude = 999;
statWisdom = 0;
statMagic = 5;

lootExp = 2;
set_statistics(self, true);

statMaxHealth = 9999;
statHealth = statMaxHealth;
statMaxMana = 0;
statMana = statMaxMana;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Collision
var yPlus, iOffset, leftCollide, rightCollide, topCollide, bottomCollide, horCollide, vertCollide;
iOffset = ((dir*6)+1);
leftCollide = collision_line(bbox_left, bbox_top, bbox_left, bbox_bottom, obj_Block, true, false);
rightCollide = collision_line(bbox_right, bbox_top, bbox_right, bbox_bottom, obj_Block, true, false);
topCollide = collision_line(bbox_left, bbox_top, bbox_right, bbox_top, obj_Block, true, false);
bottomCollide = collision_line(bbox_left, bbox_bottom, bbox_right, bbox_bottom, obj_Block, true, false);
horCollide = leftCollide and rightCollide;
vertCollide = topCollide and bottomCollide;

if horCollide
{
    //horDist = sign(abs(bbox_left - leftCollide.bbox_right) - abs(bbox_right - rightCollide.bbox_left));
    for (xx = 0; xx &gt; sprite_width; xx += 1)
    {
        var xStart = x - sprite_xoffset + max(0, sign(hSpeed) * sprite_width);
        if not (place_meeting(xStart - (sign(hSpeed) * xx), y, obj_Block))
        {
            cx = xx;
        }
    }
    x -= sign(hSpeed) * cx;
}
if vertCollide and not Fired
{
    //vertDist = sign(abs(bbox_top - topCollide.bbox_bottom) - abs(bbox_bottom - bottomCollide.bbox_top));
    for (yy = 0; yy &gt; sprite_height; yy += 1)
    {
        var yStart = y - sprite_yoffset + max(0, sign(vSpeed) * sprite_height);
        if not place_meeting(x, yStart - (sign(vSpeed) * yy), obj_Block)
        {
            cy = yy;
        }
    }
    y -= sign(vSpeed) * cy;
}

if not obj_GUI.GameFrozen
{
    if place_meeting(x+hSpeed-iOffset, y, obj_Block)
    {
        if not Collided
        {
            Collided = true;
            shake_camera(4, 0.9);
            if instance_place(x+hSpeed-iOffset, y, obj_Golem)
            {
                if not Reversing
                {
                    hSpeed = dir * -4;
                    Reversing = true;
                }
            }
            else
            {
                x += dir * 8;
                if hitSound != noone
                {
                    sfx_hit = audio_play_sound(hitSound, 1, false);
                    audio_sound_gain(sfx_hit, volume, 1);
                }
                while place_meeting(x+sign(hSpeed), y, obj_Block)
                {
                    x -= sign(hSpeed);
                }
                hSpeed = 0;
            }
        }
    }
}

if Collided and not Reversing
{
    hSpeed = 0;
    vSpeed = 0;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Change State
if Collided
{
    if sprite_index != ani_HandDestruction
    {
        image_index = 0;
    }
    sprite_index = ani_HandDestruction;
    if Reversing
    {
        image_index = min(image_index, 8);
    }
}
else
{
    switch Fired
    {
        case true:  sprite_index = ani_HandStill;
                    hSpeed = dir * 8;
                    break;
        case false: switch Forming
                    {
                        case true:  sprite_index = ani_HandCreation;
                                    hSpeed = obj_Player.hSpeed;
                                    vSpeed = sign(obj_Player.y - y) * 5;
                                    break;
                        case false: sprite_index = ani_Hand;
                                    hSpeed = obj_Player.hSpeed;
                                    vSpeed = sign(obj_Player.y - y) * 5;
                                    break;
                    };
                    break;
    }
}
switch obj_GUI.GameFrozen
{
    case false: image_speed = 0.25; break;
    case true:  image_speed = 0; break;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Change Character Position
if not obj_GUI.GameFrozen
{
    x += hSpeed;
    y += vSpeed;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Reverse
if Reversing
{
    hSpeed -= sign(hSpeed) * selfFriction;
    if abs(hSpeed) &lt; selfFriction * 2
    {
        hSpeed = 0;
        Reversing = false;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_Player">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Knockback
if not obj_GUI.GameFrozen
{
    if not Reversing and not place_meeting(x+sign(hSpeed), y, obj_Block)
    {
        with other
        {
            if abs(other.hSpeed) &gt; 2
            {
                damage_player(noone, other, false);
            }
        }
        if not Reversing
        {
            hSpeed = dir * -4;
            Reversing = true;
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="7">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Stop Forming
if Forming
{
    Forming = false;
}
if Collided
{
    instance_destroy();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw Self
draw_self();
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw Bounding Box
if obj_GUI.Debug
{
    draw_set_alpha(0.5);
    switch Reversing
    {
        case true:  bColour = c_red; break;
        case false: bColour = c_lime; break;
    }
    draw_rectangle_colour(bbox_left, bbox_top, bbox_right, bbox_bottom, bColour, bColour, bColour, bColour, false);
    draw_set_alpha(1);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
