<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-1</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Initialize Attributes
FrameModulus = 30 / room_speed;
Weight = 1;
selfGravity = Weight * (Gravity * 0.5);
selfFriction = 0;
vSpeed = 0;
hSpeed = 0;
mSpeed = 0;
dSpeed = 0;
dir = 1;
WallKickedOff = 0;
NoGravity = false;
CanFall = true;
Incorporeal = false;
Immovable = false;
Solid = true;
Invulnerable = false;
Sinking = false;
LavaBurned = false;
DamageStack = 0;
DamageStacking = false;
CanCrit = false;
Dead = false;
Mask = noone;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Environmental Checks
LeftWallCheck = place_meeting(x-2, y, obj_Block) and !place_meeting(x-2, bbox_top, obj_SlopeTL) and !place_meeting(x-2, bbox_bottom, obj_SlopeBL);
RightWallCheck = place_meeting(x+2, y, obj_Block) and !place_meeting(x+2, bbox_top, obj_SlopeTL) and !place_meeting(x-2, bbox_bottom, obj_SlopeBL);
LeftWallCheck = false;
LeftWallSliding = false;
RightWallCheck = false;
RightWallSliding = false;
Walljumping = false;
WallKickedOff = 0;
OnGround = place_meeting(x, y+1, obj_Block);
InLiquid = place_meeting(x, y, par_Liquid);
OnSlope = place_meeting(x, y+4, obj_SlopeTL);
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Initialize Status Effects
DamageElement = "";
Elements = ds_list_create();
Statuses = ds_list_create();
spark = 0;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Initialize Traits
traitLevitating = false;
traitSolid = false;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Set Volume
volume = set_volume(obj_Player, self);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="11">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Collate Damage
if DamageStack != 0
{
    with instance_create(x, y, txt_Damage)
    {
        Damage = other.DamageStack;
        Origin = other;
        Critical = other.CanCrit;
        Element = other.DamageElement;
        if Element != ""
        {
            IconSprite = sht_Elements;
            IconSubimage = ds_list_find_index(obj_GUI.Elements, string_flupper(Element));
        }
    }
}
DamageStack = 0;
DamageStacking = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Make Vulnerable
Invulnerable = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Set Volume
volume = set_volume(obj_Player, self);
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Environmental Checks
if instance_exists(obj_Controller)
{
    if obj_Controller.MapType = "Platform"
    {
        LeftWallCheck = place_meeting(x-2, y, obj_Block) and !place_meeting(x-2, bbox_top, obj_SlopeTL) and !place_meeting(x-2, bbox_bottom, obj_SlopeBL);
        RightWallCheck = place_meeting(x+2, y, obj_Block) and !place_meeting(x+2, bbox_top, obj_SlopeTL) and !place_meeting(x-2, bbox_bottom, obj_SlopeBL);
        if WallKickedOff &gt;= 1
        {
            LeftWallCheck = false;
            RightWallCheck = false;
            WallKickedOff -= 1;
        }
        OnGround = place_meeting(x, y+1, obj_Block);
        InLiquid = place_meeting(x, y, par_Liquid);
        OnSlope = place_meeting(x, y+4, obj_SlopeTL);
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Collision
if instance_exists(obj_Controller)
{
    if not obj_GUI.GameFrozen and obj_Controller.MapType = "Platform"
    {
        if not Incorporeal and Solid
        {
            if place_meeting(x+hSpeed, y, obj_Block)
            {
                yPlus = 0;
                if not Mask = object_get_name(place_meeting(x+hSpeed, y-yPlus, obj_Block))
                {
                    while place_meeting(x+hSpeed, y-yPlus, obj_Block) and yPlus &lt;= TileDimensions
                    {
                        yPlus += 1;
                    }
                }
                if place_meeting(x+hSpeed, y-yPlus, obj_Block)
                {
                    if not Mask = object_get_name(place_meeting(x+sign(hSpeed), y, obj_Block))
                    {
                        while !place_meeting(x+sign(hSpeed), y, obj_Block)
                        {
                            x += sign(hSpeed);
                        }
                    }
                    if object_is_ancestor(self, obj_Player)
                    {
                        if abs(iSpeed) = 0
                        {
                            hSpeed = 0;
                        }
                    }
                    else
                    {
                        hSpeed = 0;
                    }
                }
                else
                {
                    y -= yPlus;
                }
            }
            
            if place_meeting(x, y+vSpeed, obj_Block)
            {
                if not Mask = object_get_name(place_meeting(x, y+sign(vSpeed), obj_Block))
                {
                    while !place_meeting(x, y+sign(vSpeed), obj_Block)
                    {
                        y += sign(vSpeed);
                    }
                }
            }
            
            if object_get_parent(self) = obj_Player
            {
                if place_meeting(x, y+1, obj_LedgeMiddle)
                {
                    inst = instance_place(x, y+1, obj_LedgeMiddle)
                    if obj_GUI.kpDown
                    {
                        y = inst.bbox_bottom + sprite_yoffset;
                    }
                }
            }
            
            instBlock = instance_place(x, y+vSpeed, obj_Block);
            instBlockDown = instance_place(x, y+1, obj_Block);
            if instBlock
            {
                if not Mask = object_get_name(instBlock)
                {
                    if instBlock.object_index != obj_LedgeMiddle
                    {
                        while !place_meeting(x, y+sign(vSpeed), obj_Block)
                        {
                            y += sign(vSpeed);
                        }
                    }
                    vSpeed = 0;
                }
            }
            if instBlockDown
            {
                if instBlockDown.object_index = obj_Elevator
                {
                    vSpeed = instBlockDown.vSpeed;
                    hSpeed += instBlockDown.hSpeed;
                }
            }
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Fall by Gravity
if instance_exists(obj_Controller)
{
    if not obj_GUI.GameFrozen and obj_Controller.MapType = "Platform"
    {
        if not (NoGravity or traitLevitating)
        {
            selfGravity = Weight * (Gravity * 0.5);
            if InLiquid
            {
                if not Sinking
                {
                    Sinking = true;
                    vSpeed = 1;
                }
                selfGravity = Weight * (Gravity * 0.5) * (2 / instance_nearest(x, y, par_Liquid).Density);
            }
            else
            {
                Sinking = false;
            }
            G = selfGravity * FrameModulus;
            if not OnGround
            {
                if not (LeftWallSliding or RightWallSliding)
                {
                    vSpeed += G;
                    vSpeed = min(max(vSpeed, -10), 10);
                }
                else
                {
                    if Walljumping
                    {
                        vSpeed += G;
                        vSpeed = min(max(vSpeed, -10), 10);
                    }
                    if LeftWallSliding or RightWallSliding
                    {
                        if obj_WeaponSwitcher.Weapon = 5 and is_string(ds_list_find_value(obj_WeaponSwitcher.WeaponsList, 5))
                        {
                            vSpeed = 0;
                        }
                        else
                        {
                            vSpeed = (G * 0.1) * Weight;
                        }
                    }
                }
            }
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Create Status Effects
var ei;
if not obj_GUI.GameFrozen
{
    //Burning
    if (status("BURN") + 1)
    {
        if status("BURN") mod 15 = 0 and status("BURN") &lt; status_duration("BURN")
        {
            with instance_create(x, y, txt_Damage)
            {
                Origin = other;
                Damage = status_damage("BURN", Origin);
                Element = "FIRE";
            }
        }
    }
    //Poisoned
    if (status("POISON") + 1)
    {
        if status("POISON") mod 30 = 0 and status("POISON") &lt; status_duration("POISON")
        {
            with instance_create(x, y, txt_Damage)
            {
                Origin = other;
                Damage = status_damage("POISON", Origin);
                Element = "POISON";
            }
            ds_list_replace(Statuses, ds_list_find_index(Statuses, "POISON") + 3, status_damage("POISON") * 2);
        }
    }
    //Poisoned
    if (status("CURSE") + 1)
    {
        if status("CURSE") mod 60 = 0 and status("CURSE") &lt; status_duration("CURSE")
        {
            with instance_create(x, y, txt_Damage)
            {
                Origin = other;
                Damage = status_damage("CURSE", Origin);
                Element = "DARKNESS";
            }
        }
    }
}

if not obj_GUI.GameFrozen
{
    for (i = 0; i &lt; ds_list_size(obj_GUI.Statuses); i += 1)
    {
        ev = ds_list_find_value(obj_GUI.Statuses, i);
        ei = ds_list_find_index(Statuses, string_upper(ev));
        if ei != -1
        {
            ds_list_replace(Statuses, ei + 1, ds_list_find_value(Statuses, ei + 1) - 1);
            if status(string_upper(ev)) &lt; 0
            {
                ds_list_delete(Statuses, ei + 3);
                ds_list_delete(Statuses, ei + 2);
                ds_list_delete(Statuses, ei + 1);
                ds_list_delete(Statuses, ei);
            }
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Meeting Liquid (Shelved)
/*if place_meeting(x, y, par_Liquid)
{
    if LavaBurned = false
    {
        with instance_create(x, instance_nearest(x, y, par_Liquid).bbox_top-1, instance_nearest(x, y, par_Liquid).SplashType)
        {
            sprite_index = SplashDip;
        }
        if place_meeting(x, y, obj_Lava)
        {
            statHealth -= 4;
            with instance_create(x, y, txt_Damage)
            {
                Damage = 4;
            }
            LavaBurned = true;
            for (i = 0; i &lt; 10; i += 1)
            {
                SmokeSize = choose(obj_GUI.partSmokeSmall,obj_GUI.partSmokeMedium,obj_GUI.partSmokeLarge);
                part_particles_create(obj_GUI.partSystem, x+random_range(-sprite_xoffset, sprite_width-sprite_xoffset),y-sprite_height+random_range(-4, 4), SmokeSize, 1);
            }
        }
    }
}
else
{
    if LavaBurned = true
    {
        with instance_create(x, instance_nearest(x, y, par_Liquid).bbox_top-1, instance_nearest(x, y, par_Liquid).SplashType)
        {
            sprite_index = SplashBreak;
        }
        LavaBurned = false;
    }
}*/
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Freeze Animations
if not obj_GUI.GameFrozen
{
    image_speed = 0;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Encounter Move Wrap
if instance_exists(obj_Controller)
{
    if obj_Controller.Encounter = "Random"
    {
        move_wrap(true, false, TileDimensions - 2);
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw Self
draw_set_alpha(1);
if !Solid
{
    draw_set_alpha(0.5);
}
draw_self();
if Invulnerable and not Dead
{
    shader_set(shd_WhitedOut);
    draw_self();
    shader_reset();
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw Status Effects
if (status("BURN") + 1) {
    if (status("BURN") mod max(1, floor(status_duration("BURN") - status("BURN")) * 0.1) == 0) {
        FlameColour = choose(obj_Particles.partFlameRed, obj_Particles.partFlameOrange, obj_Particles.partFlameYellow);
        part_particles_create(obj_Particles.partSystem, x+random_range(-sprite_xoffset, sprite_width-sprite_xoffset),y+random_range(-sprite_yoffset, sprite_height-sprite_yoffset), FlameColour, 1);
    }
}
if (status("POISON") + 1) {
    PoisonBubbleSize = choose(obj_Particles.partPoisonSmall, obj_Particles.partPoisonMedium, obj_Particles.partPoisonLarge);
    shader_set(shd_SolidColour);
    shader_set_uniform_f(shader_get_uniform(shd_SolidColour, "u_vColour"), 0.5, 1.0, 0.0, (status("POISON") / status_duration("POISON")) * 0.5);
    draw_self();
    shader_reset();
    part_particles_create(obj_Particles.partSystem, x+random_range(-sprite_xoffset, sprite_width-sprite_xoffset),y-sprite_height+random_range(-4, 4), PoisonBubbleSize, 1);
}
if (status("PARALYZE") + 1) {
    image_speed = 0;
    shader_set(shd_SolidColour);
    shader_set_uniform_f(shader_get_uniform(shd_SolidColour, "u_vColour"), 1.0, 1.0, 0.0, (status("PARALYZE") / status_duration("PARALYZE")) * 0.5);
    draw_self();
    shader_reset();
    if (status("PARALYZE") mod 20 == 0) {
        spark_x1 = x + random_range(-sprite_xoffset, sprite_width - sprite_xoffset);
        spark_x2 = x + random_range(-sprite_xoffset, sprite_width - sprite_xoffset);
        spark_y1 = y + random_range(-sprite_yoffset, sprite_height - sprite_yoffset);
        spark_y2 = y + random_range(-sprite_yoffset, sprite_height - sprite_yoffset);
        spark = 1;
    }
    if (spark) {
        draw_lightning(spark_x1, spark_y1, spark_x2, spark_y2, 1, 1, 4, false, false, c_yellow, spark);
        spark -= 0.1;
    }
}
else {
    spark = 0;
}
if (status("CURSE") + 1) {
    PoisonBubbleSize = choose(obj_Particles.partCurseSmall, obj_Particles.partCurseMedium, obj_Particles.partCurseLarge);
    shader_set(shd_SolidColour);
    shader_set_uniform_f(shader_get_uniform(shd_SolidColour, "u_vColour"), 0.5, 0.0, 0.75, (status("CURSE") / status_duration("CURSE")) * 0.5);
    draw_self();
    shader_reset();
    part_particles_create(obj_Particles.partSystem, x+random_range(-sprite_xoffset, sprite_width-sprite_xoffset),y-sprite_height+random_range(-4, 4), PoisonBubbleSize, 1);
}
if (place_meeting(x, y, obj_Beam)) {
    with (instance_place(x, y, obj_Beam)) {
        if (State == 2) {
            SmokeSize = choose(obj_Particles.partSmokeSmall, obj_Particles.partSmokeMedium, obj_Particles.partSmokeLarge);
            part_particles_create(obj_Particles.partSystem, other.x+random_range(-other.sprite_xoffset, other.sprite_width-other.sprite_xoffset),other.y-other.sprite_height+random_range(-4, 4), SmokeSize, 1);
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw Bounding Box
if obj_GUI.Debug
{
    draw_set_alpha(0.5);
    draw_rectangle_colour(bbox_left, bbox_top, bbox_right, bbox_bottom, c_lime, c_lime, c_lime, c_lime, false);
    draw_set_alpha(1);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
