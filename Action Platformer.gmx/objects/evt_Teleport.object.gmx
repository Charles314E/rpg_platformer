<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_EventTeleport</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-1000000</depth>
  <persistent>0</persistent>
  <parentName>par_Event</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Initialize Parameters
Map = noone;
MapType = "Platform";
Outside = false;
X = 0;
Y = 0;
Dir = "default";
elevatorTransition = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Create New Elevator
with obj_Player
{
    var xx = ds_list_find_value(obj_Controller.defaultElevatorLocation, 0);
    elevator = instance_create(xx, bbox_bottom+1, obj_Elevator);
    show_debug_message("[DBG]: Created elevator " + string(elevator) + " in room " + room_get_name(room) + " at (" + string(xx) + ", " + string(bbox_bottom + 1) + ").");
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Set Default Directions
if Dir = "default"
{
    switch MapType
    {
        case "Field": Dir = 180; break;
        case "Platform": Dir = 90; break;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_Player">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Teleport
elevatorTransition = false;
Floor = 0;
HighestFloor = 0;
LowestFloor = 0;
with other
{
    var elevator = instance_place(x, bbox_bottom + 1, obj_Elevator);
    if elevator
    {
        other.elevatorTransition = true;
        other.Floor = elevator.Floor;
        other.HighestFloor = elevator.HighestFloor;
        other.LowestFloor = elevator.LowestFloor;
        other.elevatorHSpeed = elevator.hSpeed;
        other.elevatorVSpeed = elevator.vSpeed;
        with elevator
        {
            instance_destroy();
        }
        show_debug_message("[DBG]: Destroyed elevator " + string(elevator) + " in room " + room_get_name(room) + " at (" + string(x) + ", " + string(bbox_bottom + 1) + "), player is at (" + string(obj_Player.x) + ", " + string(obj_Player.y) + ").");
    }
}
if elevatorTransition
{
    switch Outside
    {
        case true: room_transition(Map, MapType, X, Y, tsn_FadeWhite, 0.5, Dir, elevatorTransition, Floor, HighestFloor, LowestFloor, elevatorHSpeed, elevatorVSpeed); break;
        case false: room_transition(Map, MapType, X, Y, tsn_FadeBlack, 1, Dir, elevatorTransition, Floor, HighestFloor, LowestFloor, elevatorHSpeed, elevatorVSpeed); break;
    }
}
else
{
    switch Outside
    {
        case true: room_transition(Map, MapType, X, Y, tsn_FadeWhite, 0.5, Dir); break;
        case false: room_transition(Map, MapType, X, Y, tsn_FadeBlack, 1, Dir); break;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
