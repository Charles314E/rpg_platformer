<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_Shop</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-1000000</depth>
  <persistent>0</persistent>
  <parentName>par_HUDObject</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Initialize Variables
obj_GUI.Cutscene = true;

cm = 0;
cr = 12;
ci = cm;
cp = cm;

slotBackAlpha = 0;
slotBackOffset = 0;
n = 0;

Buying = false;
Selling = false;

step = 0;
lineBrightness = 0;
lowerLightBound = 0.3;
upperLightBound = 0.6;

Origin = noone;
Items = ds_list_create();

alarm[0] = room_speed / 30;
alarm[1] = room_speed / 15;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Create Shop
invList = inventory_list(obj_Inventory.InventoryList);

/*ds_list_add(Items, "Lesser Potion of Healing", 10);
ds_list_add(Items, "Lesser Potion of Magick", 15);
ds_list_add(Items, "Steel Sword", 80);
ds_list_add(Items, "Wooden Bow", 50);
ds_list_add(Items, "Steel Greatsword", 130);*/
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Select Item
if not ((Buying and ds_list_size(Items) = 0) or (Selling and ds_list_size(invList) = 0))
{
    if obj_GUI.kpUp or obj_GUI.khUp
    {
        cp = max(0, cp - 1);
        slotBackAlpha = 0;
        slotBackOffset = 0;
        n = 0;
        alarm[0] = room_speed / 30;
    }
    if obj_GUI.kpDown or obj_GUI.khDown
    {
        if Buying
        {
            cp = min((ds_list_size(Items) / 2) - 1, cp + 1);
        }
        else if Selling
        {
            cp = min(ds_list_size(invList) - 1, cp + 1);
        }
        slotBackAlpha = 0;
        slotBackOffset = 0;
        n = 0;
        alarm[0] = room_speed / 30;
    }
    if (obj_GUI.kpInteract or obj_GUI.kpAttack) or (obj_GUI.khInteract or obj_GUI.khAttack)
    {
        var item, price;
        if Buying
        {
            item = ds_list_find_value(Items, (cp * 2));
            price = ds_list_find_value(Items, (cp * 2) + 1);
            if obj_GUI.Gold &gt;= price
            {
                inventory_add(obj_Inventory.InventoryList, item, 1);
                change_gold(-price);
            }
        }
        else if Selling
        {
            item = ds_list_find_value(ds_list_find_value(invList, cp), 0);
            if ds_list_find_index(obj_Inventory.dbItems, item) != -1
            {
                ii = ds_list_find_index(obj_Inventory.dbItems, item);
                price = ds_list_find_value(obj_Inventory.dbItems, ii + 3);
            }
            else
            {
                if ds_list_find_index(obj_Inventory.dbWeapons, item) != -1
                {
                    ii = ds_list_find_index(obj_Inventory.dbWeapons, item);
                    price = ds_list_find_value(obj_Inventory.dbWeapons, ii + 3);
                }
            }
            inventory_remove(obj_Inventory.InventoryList, item, 1);
            change_gold(price);
            invList = inventory_list(obj_Inventory.InventoryList);
        }
        slotBackAlpha = 0;
        slotBackOffset = 0;
        n = 0;
        alarm[0] = room_speed / 30;
    }
}
alarm[1] = room_speed / 5;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Create Slot Shadow
if n &lt; 16
{
    slotBackAlpha += 0.01;
    slotBackOffset += 0.25;
    n += 1;
    alarm[0] = room_speed / 30;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Stock Shop
ds_list_copy(Items, Origin.Items);
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Exit Shop
if obj_GUI.kpMenu
{
    obj_GUI.Cutscene = false;
    Origin.Talking = false;
    instance_destroy();
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Fluctuate Line Lighting
step += 1;
lineBrightness = ((upperLightBound - lowerLightBound) * sin(step * 1/24)) + lowerLightBound;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw Wares
if Buying
{
    var ww, wh, wx, xy, ii, item, price, itemSprite, itemSubimage, sep, w;
    ww = 18;
    wh = (cr + 3) * 2;
    wx = view_wport[view_current] / 2;
    wy = 128;
    w = ww * 80;
    draw_set_font(fnt_TitleFont);
    draw_set_halign(fa_center);
    draw_set_valign(fa_bottom);
    draw_text_transformed_colour(wx + ((ww + 2) * 8) + 32, wy - 32, "Buy", 0.5, 0.5, 0, c_white, c_white, c_white, c_white, 1);
    draw_set_halign(fa_left);
    draw_set_valign(fa_top);
    draw_line_colour(wx, wy - 32, wx + ((ww + 2) * 16) + 63, wy - 32, c_white, c_white);
    for (i = 1; i &lt; 7; i += 1)
    {
        draw_set_alpha(((8 - i) / 8) * lineBrightness);
        draw_line_colour(wx + i, wy - 32 + i, wx + ((ww + 2) * 16) + 63 - i, wy - 32 + i, c_white, c_white);
    }
    sep = string_height("#") * 0.1625;
    draw_set_font(fnt_SystemFont);
    for (i = 0; i &lt; min(cr, ds_list_size(Items) / 2); i += 1)
    {
        ci = i + cm;
        item = ds_list_find_value(Items, (ci * 2));
        price = ds_list_find_value(Items, (ci * 2) + 1);
        ii = ds_list_find_index(obj_Inventory.dbItems, item);
        if ii != -1
        {
            itemSprite = ds_list_find_value(obj_Inventory.dbItems, ii + 1);
            itemSubimage = ds_list_find_value(obj_Inventory.dbItems, ii + 2);
        }
        else
        {
            ii = ds_list_find_index(obj_Inventory.dbWeapons, item);
            if ii != -1
            {
                itemSprite = ds_list_find_value(obj_Inventory.dbWeapons, ii + 1);
                itemSubimage = ds_list_find_value(obj_Inventory.dbWeapons, ii + 2);
            }
        }
        var a;
        textColour = c_white;
        if obj_GUI.Gold &lt; price
        {
            textColour = c_ltgray;
        }
        if cp = ci
        {
            a = image_alpha * slotBackAlpha * 2;
            draw_set_alpha(a);
            draw_rectangle_colour(wx + 3, wy + (i * 32) + 2, wx + 29, wy + ((i + 1) * 32) - 2, c_black, c_black, c_black, c_black, false);
            draw_rectangle_colour(wx + 35, wy + (i * 32) + 2, wx + ((ww + 2) * 16) - 3, wy + ((i + 1) * 32) - 2, c_black, c_black, c_black, c_black, false);
            draw_rectangle_colour(wx + ((ww + 2) * 16) + 3, wy + (i * 32) + 2, wx + ((ww + 2) * 16) + 61, wy + ((i + 1) * 32) - 2, c_black, c_black, c_black, c_black, false);
            draw_set_alpha(1);
            create_message_box("", sht_Box, 2, 2, false, a, wx - slotBackOffset, wy + (i * 32) + slotBackOffset);
            create_message_box("", sht_Box, ww, 2, false, a, wx + 32 - slotBackOffset, wy + (i * 32) + slotBackOffset);
            create_message_box("", sht_Box, 4, 2, false, a, wx + ((ww + 2) * 16) - slotBackOffset, wy + (i * 32) + slotBackOffset);
            draw_sprite_ext(itemSprite, itemSubimage, wx + 7 - slotBackOffset, wy + (i * 32) + 7 + slotBackOffset, 1, 1, 0, c_white, a);
            draw_text_ext_transformed_colour(wx + 40 - slotBackOffset, wy + (i * 32) - 2 + slotBackOffset, item, sep, w, 0.1625, 0.1625, 0, textColour, textColour, textColour, textColour, a);
            draw_sprite_ext(ani_GoldIcon, 0, wx + ((ww + 2) * 16) + 7 - slotBackOffset, wy + (i * 32) + 12 + slotBackOffset, 1, 1, 0, c_white, a);
            draw_text_ext_transformed_colour(wx + ((ww + 2) * 16) + 24 - slotBackOffset, wy + (i * 32) + 4 + slotBackOffset, price, sep, w, 0.1625, 0.1625, 0, textColour, textColour, textColour, textColour, a);
        }
        a = image_alpha;
        create_message_box("", sht_Box, 2, 2, false, a, wx, wy + (i * 32));
        create_message_box("", sht_Box, ww, 2, false, a, wx + 32, wy + (i * 32));
        create_message_box("", sht_Box, 4, 2, false, a, wx + ((ww + 2) * 16), wy + (i * 32));
        draw_sprite_ext(itemSprite, itemSubimage, wx + 7, wy + (i * 32) + 7, 1, 1, 0, c_white, a);
        draw_text_ext_transformed_colour(wx + 40, wy + (i * 32) - 2, item, sep, w, 0.1625, 0.1625, 0, textColour, textColour, textColour, textColour, a);
        draw_sprite_ext(ani_GoldIcon, 0, wx + ((ww + 2) * 16) + 7, wy + (i * 32) + 12, 1, 1, 0, c_white, a);
        draw_text_ext_transformed_colour(wx + ((ww + 2) * 16) + 24, wy + (i * 32) + 4, price, sep, w, 0.1625, 0.1625, 0, textColour, textColour, textColour, textColour, a);
        if cp = ci
        {
            var itemCount;
            itemCount = inventory_count(obj_Inventory.InventoryList, item);
            create_message_box("", sht_Box, 12, 1, false, a, wx, wy - 16);
            if itemCount &gt; 0
            {
                textColour = c_white;
                draw_text_ext_transformed_colour(wx + 8, wy - 21, string(itemCount) + " in inventory", sep, w, 0.1625, 0.1625, 0, textColour, textColour, textColour, textColour, a);
            }
            else
            {
                textColour = c_ltgray;
                draw_text_ext_transformed_colour(wx + 8, wy - 21, "None in inventory", sep, w, 0.1625, 0.1625, 0, textColour, textColour, textColour, textColour, a);
            }
        }
    }
    for (i = min(cr, ds_list_size(Items) / 2); i &lt; cr; i += 1)
    {
        a = image_alpha;
        draw_set_alpha(a * 0.2);
        draw_rectangle_colour(wx + 3, wy + (i * 32) + 2, wx + 29, wy + ((i + 1) * 32) - 2, c_black, c_black, c_black, c_black, false);
        draw_rectangle_colour(wx + 35, wy + (i * 32) + 2, wx + ((ww + 2) * 16) - 3, wy + ((i + 1) * 32) - 2, c_black, c_black, c_black, c_black, false);
        draw_rectangle_colour(wx + ((ww + 2) * 16) + 3, wy + (i * 32) + 2, wx + ((ww + 2) * 16) + 61, wy + ((i + 1) * 32) - 2, c_black, c_black, c_black, c_black, false);
        draw_set_alpha(1);
        create_message_box("", sht_Box, 2, 2, false, a, wx, wy + (i * 32));
        create_message_box("", sht_Box, ww, 2, false, a, wx + 32, wy + (i * 32));
        create_message_box("", sht_Box, 4, 2, false, a, wx + ((ww + 2) * 16), wy + (i * 32));
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw Player Items
if Selling
{
    var ww, wh, wx, xy, ii, item, price, itemSprite, itemSubimage, sep, w;
    ww = 18;
    wh = (cr + 3) * 2;
    wx = view_wport[view_current] / 2;
    wy = 128;
    w = ww * 80;
    draw_set_font(fnt_TitleFont);
    draw_set_halign(fa_center);
    draw_set_valign(fa_bottom);
    draw_text_transformed_colour(wx + ((ww + 2) * 8) + 32, wy - 32, "Sell", 0.5, 0.5, 0, c_white, c_white, c_white, c_white, 1);
    draw_set_halign(fa_left);
    draw_set_valign(fa_top);
    draw_line_colour(wx, wy - 32, wx + ((ww + 2) * 16) + 63, wy - 32, c_white, c_white);
    for (i = 1; i &lt; 7; i += 1)
    {
        draw_set_alpha(((8 - i) / 8) * lineBrightness);
        draw_line_colour(wx + i, wy - 32 + i, wx + ((ww + 2) * 16) + 63 - i, wy - 32 + i, c_white, c_white);
    }
    sep = string_height("#") * 0.1625;
    draw_set_font(fnt_SystemFont);
    for (var i = 0; i &lt; min(cr, ds_list_size(invList)); i += 1)
    {
        ci = i + cm;
        item = ds_list_find_value(ds_list_find_value(invList, ci), 0);
        ii = ds_list_find_index(obj_Inventory.dbItems, item);
        if ii != -1
        {
            itemSprite = ds_list_find_value(obj_Inventory.dbItems, ii + 1);
            itemSubimage = ds_list_find_value(obj_Inventory.dbItems, ii + 2);
            price = ds_list_find_value(obj_Inventory.dbItems, ii + 3);
        }
        else
        {
            ii = ds_list_find_index(obj_Inventory.dbWeapons, item);
            if ii != -1
            {
                itemSprite = ds_list_find_value(obj_Inventory.dbWeapons, ii + 1);
                itemSubimage = ds_list_find_value(obj_Inventory.dbWeapons, ii + 2);
                price = ds_list_find_value(obj_Inventory.dbWeapons, ii + 3);
            }
        }
        var a;
        textColour = c_white;
        if cp = ci
        {
            a = image_alpha * slotBackAlpha * 2;
            draw_set_alpha(a);
            draw_rectangle_colour(wx + 3, wy + (i * 32) + 2, wx + 29, wy + ((i + 1) * 32) - 2, c_black, c_black, c_black, c_black, false);
            draw_rectangle_colour(wx + 35, wy + (i * 32) + 2, wx + ((ww + 2) * 16) - 3, wy + ((i + 1) * 32) - 2, c_black, c_black, c_black, c_black, false);
            draw_rectangle_colour(wx + ((ww + 2) * 16) + 3, wy + (i * 32) + 2, wx + ((ww + 2) * 16) + 61, wy + ((i + 1) * 32) - 2, c_black, c_black, c_black, c_black, false);
            draw_set_alpha(1);
            create_message_box("", sht_Box, 2, 2, false, a, wx - slotBackOffset, wy + (i * 32) + slotBackOffset);
            create_message_box("", sht_Box, ww, 2, false, a, wx + 32 - slotBackOffset, wy + (i * 32) + slotBackOffset);
            create_message_box("", sht_Box, 4, 2, false, a, wx + ((ww + 2) * 16) - slotBackOffset, wy + (i * 32) + slotBackOffset);
            draw_sprite_ext(itemSprite, itemSubimage, wx + 7 - slotBackOffset, wy + (i * 32) + 7 + slotBackOffset, 1, 1, 0, c_white, a);
            draw_text_ext_transformed_colour(wx + 40 - slotBackOffset, wy + (i * 32) - 2 + slotBackOffset, item, sep, w, 0.1625, 0.1625, 0, textColour, textColour, textColour, textColour, a);
            draw_sprite_ext(ani_GoldIcon, 0, wx + ((ww + 2) * 16) + 7 - slotBackOffset, wy + (i * 32) + 12 + slotBackOffset, 1, 1, 0, c_white, a);
            draw_text_ext_transformed_colour(wx + ((ww + 2) * 16) + 24 - slotBackOffset, wy + (i * 32) + 4 + slotBackOffset, price, sep, w, 0.1625, 0.1625, 0, textColour, textColour, textColour, textColour, a);
        }
        a = image_alpha;
        create_message_box("", sht_Box, 2, 2, false, a, wx, wy + (i * 32));
        create_message_box("", sht_Box, ww, 2, false, a, wx + 32, wy + (i * 32));
        create_message_box("", sht_Box, 4, 2, false, a, wx + ((ww + 2) * 16), wy + (i * 32));
        draw_sprite_ext(itemSprite, itemSubimage, wx + 7, wy + (i * 32) + 7, 1, 1, 0, c_white, a);
        draw_text_ext_transformed_colour(wx + 40, wy + (i * 32) - 2, item, sep, w, 0.1625, 0.1625, 0, textColour, textColour, textColour, textColour, a);
        draw_sprite_ext(ani_GoldIcon, 0, wx + ((ww + 2) * 16) + 7, wy + (i * 32) + 12, 1, 1, 0, c_white, a);
        draw_text_ext_transformed_colour(wx + ((ww + 2) * 16) + 24, wy + (i * 32) + 4, price, sep, w, 0.1625, 0.1625, 0, textColour, textColour, textColour, textColour, a);
        if cp = ci
        {
            var itemCount;
            itemCount = inventory_count(obj_Inventory.InventoryList, item);
            create_message_box("", sht_Box, 12, 1, false, a, wx, wy - 16);
            if itemCount &gt; 0
            {
                textColour = c_white;
                draw_text_ext_transformed_colour(wx + 8, wy - 21, string(itemCount) + " in inventory", sep, w, 0.1625, 0.1625, 0, textColour, textColour, textColour, textColour, a);
            }
            else
            {
                textColour = c_ltgray;
                draw_text_ext_transformed_colour(wx + 8, wy - 21, "None in inventory", sep, w, 0.1625, 0.1625, 0, textColour, textColour, textColour, textColour, a);
            }
        }
    }
    for (var i = min(cr, ds_list_size(invList)); i &lt; cr; i += 1)
    {
        a = image_alpha;
        draw_set_alpha(a * 0.2);
        draw_rectangle_colour(wx + 3, wy + (i * 32) + 2, wx + 29, wy + ((i + 1) * 32) - 2, c_black, c_black, c_black, c_black, false);
        draw_rectangle_colour(wx + 35, wy + (i * 32) + 2, wx + ((ww + 2) * 16) - 3, wy + ((i + 1) * 32) - 2, c_black, c_black, c_black, c_black, false);
        draw_rectangle_colour(wx + ((ww + 2) * 16) + 3, wy + (i * 32) + 2, wx + ((ww + 2) * 16) + 61, wy + ((i + 1) * 32) - 2, c_black, c_black, c_black, c_black, false);
        draw_set_alpha(1);
        create_message_box("", sht_Box, 2, 2, false, a, wx, wy + (i * 32));
        create_message_box("", sht_Box, ww, 2, false, a, wx + 32, wy + (i * 32));
        create_message_box("", sht_Box, 4, 2, false, a, wx + ((ww + 2) * 16), wy + (i * 32));
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
