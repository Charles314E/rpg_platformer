<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_MessageBox</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-1000000</depth>
  <persistent>0</persistent>
  <parentName>par_HUDObject</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Keybinds
set_keybinds(ord("W"), 
             ord("A"), 
             ord("S"), 
             ord("D"), 
             vk_space, 
             ord("E"), 
             vk_tab, 
             ord("Z"), 
             vk_shift, 
             ord("R"),
             ord("K"),
             ord("G"));
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Initialize Variables
Messages = ds_list_create();
CurrentMessage = "";
CanClose = true;
char = 0;
Subimage = 0;
ImageSpeed = 0.1;
TalkTimer = 0;
TalkRollover = 5;
choiceOption = 0;
choiceBackAlpha = 0;
choiceBackOffset = 0;
n = 0;
Active = true;
choiceInit = false;
choiceSelected = false;
Choices = ds_list_create();
if instance_exists(obj_GUI)
{
    obj_GUI.Cutscene = true;
}
if instance_exists(obj_Player)
{
    obj_Player.hSpeed = 0;
    obj_Player.Walking = false;
}
ResumesGame = true;
UnpausesGame = true;
Origin = noone;
init = false;
with instance_create(x, y, chd_MessageArrow)
{
    Origin = other;
}
show_debug_message("[DBG]: Created message box.");
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>other</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Set Edge Tears
w = 48;
h = 10;

EdgeTears = ds_grid_create(w, h);
for (xx = 1; xx &lt; w; xx += 1)
{
    ds_grid_add(EdgeTears, xx, 0, random_range(1, 3));
    ds_grid_add(EdgeTears, xx, h - 1, random_range(6, 8));
}
for (yy = 1; yy &lt; h; yy += 1)
{
    ds_grid_add(EdgeTears, 0, yy, random_range(13, 15));
    ds_grid_add(EdgeTears, w - 1, yy, random_range(10, 12));
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Create New Messagebox
with instance_create(x, y, msg_Messagebox)
{
    Messages = other.Messages;
    ds_list_delete(Messages, 1);
    ds_list_delete(Messages, 0);
}
instance_destroy();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Create Option Shadow
if Active
{
    if n &lt; 16
    {
        choiceBackAlpha += 0.01;
        choiceBackOffset += 0.25;
        n += 1;
        alarm[0] = room_speed / 30;
    }
    else
    {
        n = 0;
    }
}
else
{
    alarm[0] = room_speed / 30;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Keybinds
set_keybinds(ord("W"), 
             ord("A"), 
             ord("S"), 
             ord("D"), 
             vk_space, 
             ord("E"), 
             vk_tab, 
             ord("Z"), 
             vk_shift, 
             ord("R"),
             ord("K"),
             ord("G"));
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Initialize Message
if not init
{
    MessageLength = string_length(ds_list_find_value(Messages, 0));
    MessageScroll = ds_list_create();
    for (var i = 0; i &lt; MessageLength; i += 1)
    {
        ds_list_add(MessageScroll, string_copy(ds_list_find_value(Messages, 0), 0, i + 1));
        show_debug_message("[DBG]: " + ds_list_find_value(MessageScroll, i));
    }
    init = true;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Get Cursor Position
if not obj_Menu.MenuShown and ds_list_size(Choices) &gt; 0 and CurrentMessage = ds_list_find_value(Messages, 0) and Active
{
    if obj_GUI.kpUp
    {
        choiceOption = max(0, choiceOption - 1);
        choiceBackAlpha = 0;
        choiceBackOffset = 0;
        n = 0;
        alarm[0] = room_speed / 30;
    }
    if obj_GUI.kpDown
    {
        choiceOption = min(floor(ds_list_size(Choices) / 2) - 1, choiceOption + 1);
        choiceBackAlpha = 0;
        choiceBackOffset = 0;
        n = 0;
        alarm[0] = room_speed / 30;
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Select Choice
if not obj_Menu.MenuShown and ds_list_size(Choices) &gt; 0 and CurrentMessage = ds_list_find_value(Messages, 0) and Active
{
    if obj_GUI.kpInteract or obj_GUI.kpAttack and not choiceSelected
    {
        cutscene_start(obj_Controller, ds_list_find_value(Choices, (choiceOption * 2) + 1));
        choiceSelected = true;
    }
}

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Add Character to Message
if Active
{
    switch (obj_GUI.khInteract or obj_GUI.khAttack)
    {
        case true: TalkRollover = 1; break;
        case false: TalkRollover = 5; break;
    }
    if not obj_Menu.MenuShown
    {
        TalkTimer += 1;
        if TalkTimer &gt;= TalkRollover + 1 and char &lt; MessageLength - 1
        {
            char += 1;
            CurrentMessage = ds_list_find_value(MessageScroll, char);
            TalkTimer = 0;
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Increase Subimage
if not obj_Menu.MenuShown and Active
{
    Subimage += ImageSpeed;
    if Subimage &gt;= sprite_get_number(ani_ChoiceArrow)
    {
        Subimage = 0;
    }
    GemOffset = 0;
    if (round(Subimage) - 1) mod 3 = 0
    {
        GemOffset = 1;
    }
    else if ((round(Subimage) - 2) mod 6) = 0 or ((round(Subimage) - 3) mod 6) = 0
    {
        GemOffset = 2;
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Clear Messagebox
if ds_list_size(Choices) = 0 and CanClose and CurrentMessage = ds_list_find_value(Messages, 0) and Active
{
    if obj_GUI.kpInteract or obj_GUI.kpAttack
    {
        if ds_list_size(Messages) &gt; 2
        {
            visible = false;
            if ds_list_find_value(Messages, 1) = 0
            {
                alarm[1] = 0.5 * room_speed;
            }
            else
            {
                alarm[1] = ds_list_find_value(Messages, 1) * room_speed;
            }
        }
        else
        {
            cutscene_start(obj_Controller, tml_QuitChoice);
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw Message Box
if Active
{
    create_message_box(CurrentMessage, sht_Box, w, h, EdgeTears, image_alpha);
    if ds_list_size(Choices) &gt; 0
    {
        if CurrentMessage = ds_list_find_value(Messages, 0)
        {
            var cx, cy;
            cx = (view_wport[0] / 2) + ((((w + 1) / 2) - 20) * 16);
            cy = view_hport[0] - ((((h / 2) + 1) * 2) * 16) - ((floor(ds_list_size(Choices) / 2) + 1) * 16);
            create_choice_box(Choices, sht_Box, 20, EdgeTears, image_alpha, cx, cy);
            if not choiceInit
            {
                alarm[0] = room_speed / 30;
                choiceInit = true;
            }
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw Arrow
if Active
{
    if obj_GUI.Debug
    {
        draw_text_ext_transformed_colour(view_wport[view_current] - 32, 0, string(view_wport[view_current] / 2), 0, 96, 0.1625, 0.1625, 0, c_white, c_white, c_white, c_white, 1);
        draw_text_ext_transformed_colour(view_wport[view_current] - 32, 16, string(view_hport[view_current] - 32), 0, 96, 0.1625, 0.1625, 0, c_white, c_white, c_white, c_white, 1);
        draw_text_ext_transformed_colour(view_wport[view_current] - 32, 48, char, 0, 96, 0.1625, 0.1625, 0, c_white, c_white, c_white, c_white, 1);
        draw_set_halign(fa_right);
        draw_text_ext_transformed_colour(view_wport[view_current] - 8, 64, CurrentMessage, 0, view_wport[view_current] * 64, 0.1625, 0.1625, 0, c_white, c_white, c_white, c_white, 1);
        draw_set_halign(fa_left);
        draw_text_transformed_colour(view_wport / 2, view_hport - 64, timeline_get_name(obj_Controller.timeline_index), 0.1625, 0.1625, 0, c_white, c_white, c_white, c_white, 1);
    }
    if ds_list_size(Choices) = 0 and CanClose and CurrentMessage = ds_list_find_value(Messages, 0)
    {
        draw_sprite(ani_MessageArrow, round(Subimage), view_wport[view_current] / 2, view_hport[view_current] - 48);
        if Subimage &gt;= 0 and Subimage &lt; (sprite_get_number(ani_ChoiceArrowGemGleam) * (ImageSpeed / 0.5))
        {
            draw_sprite(ani_ChoiceArrowGemGleam, round((Subimage * 0.5) / ImageSpeed), view_wport[view_current] / 2 + 8, view_hport[view_current] - 48 + GemOffset);
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
