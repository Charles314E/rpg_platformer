<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_Camera</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>-1</persistent>
  <parentName>par_HUDObject</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Set position and speed fraction
target = obj_Player;
fractionSpeed = 0.10;
TargetX = 0;
TargetY = 0;
if instance_exists(target)
{
    x = target.x;
    y = target.y;
}
shakeMagnitude = -1;
shakeFade = 0;
hSpeed = 0;
vSpeed = 0;
pause = 0;
waiting = false;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Set Views
viewWobble = 0;
wview = view_wport;
hview = view_hport;
if obj_Controller.MapType = "Platform"
{
    wview = 416;
    hview = 320;
}
else if obj_Controller.MapType = "World"
{
    wview = 256;
    hview = 192;    
}
if obj_Controller.Encounter = "Random"
{
    wview = 384;
    hview = 256;
}
view_wview[0] = wview;
view_hview[0] = hview;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Switch Target
switch_camera_target(obj_Player);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Enable the Room's View
room_speed = RoomSpeed;
wview = view_wport;
hview = view_hport;
if instance_exists(obj_Controller)
{
    if not (obj_Controller.wView and obj_Controller.hView)
    {
        if obj_Controller.MapType = "Platform"
        {
            wview = 416;
            hview = 320;
        }
        else if obj_Controller.MapType = "World"
        {
            wview = 256;
            hview = 192;    
        }
        if obj_Controller.Encounter = "Random"
        {
            wview = 384;
            hview = 256;
        }
    }
    else
    {
        wview = obj_Controller.wView;
        hview = obj_Controller.hView;
    }
}

if instance_exists(obj_Player)
{
    if not (status("NASEOUS", obj_Player) + 1)
    {
        view_wview[0] = wview;
        view_hview[0] = hview;
    }
    else
    {
        var viewWobble, statusPercentage, TimeNaseous;
        TimeNaseous = status_duration("NASEOUS", obj_Player) - status("NASEOUS", obj_Player);
        viewWobble = (0.1 * sin(TimeNaseous * 0.1));
        statusPercentage = (status("NASEOUS", obj_Player) / status_duration("NASEOUS", obj_Player));
        view_wview[0] = wview + (wview * viewWobble * statusPercentage);
        view_hview[0] = hview + (hview * viewWobble * statusPercentage);
    }
}
else
{
    view_wview[0] = wview;
    view_hview[0] = hview;
}

view_wport[0] = 1024;
view_hport[0] = 768;

view_hborder[0] = 160;
view_vborder[0] = 120;

view_object[0] = object_index;
view_visible[0] = true;
for (i = 1; i &lt; 8; i += 1)
{
    view_visible[i] = false;
}
view_enabled = true;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Shake Camera
if round(shakeMagnitude) &gt; 0
{
    view_object = noone;
    view_hborder[0] = 0;
    view_vborder[0] = 0;
    shakeMagnitude = vibrate_camera(shakeMagnitude, shakeFade);
}
else
{
    view_object = self;
    shakeMagnitude = -1;
    shakeFade = 0;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Pan towards target
if target != noone
{
    if instance_exists(target)
    {
        hSpeed = (target.x - x) * fractionSpeed;
        vSpeed = (target.y - y) * fractionSpeed;
        x += hSpeed;
        y += vSpeed;
    }
}
else
{
    hSpeed = (TargetX - x) * fractionSpeed;
    vSpeed = (TargetY - y) * fractionSpeed;
    x += hSpeed;
    y += vSpeed;
    if abs(point_distance(x, y, TargetX, TargetY)) &lt; 4 and not waiting
    {
        waiting = true;
        x = TargetX;
        y = TargetY;
        if pause &gt; 0
        {
            alarm[0] = room_speed * pause;
        }
    }
}

if instance_exists(obj_Anchor)
{
    with obj_Anchor
    {
        if collision_rectangle(x, y, x + sprite_width, y + sprite_height, obj_Player, true, true)
        {
            switch_camera_target(self);
            other.Anchor = self;
        }
        else
        {
            switch_camera_target(other.target);
        }
    }
}
else
{   
    Anchor = noone;
    if target != noone
    {
        switch_camera_target(target);
    }
}

x = max(0, min(x, room_width));
y = max(0, min(y, room_height));
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Deactivate Unneeded Instances
instance_deactivate_region(view_xview, view_yview, view_wview, view_hview, false, true);
instance_activate_region(view_xview, view_yview, view_wview, view_hview, true);

instance_activate_object(obj_Menu);
instance_activate_object(obj_Inventory);
instance_activate_object(obj_Status);
instance_activate_object(obj_Map);

instance_activate_object(par_HUDObject);
instance_activate_object(obj_LevelUp);

instance_activate_object(obj_Block);
instance_activate_object(par_Object);
instance_activate_object(par_Entity);
instance_activate_object(par_Event);
instance_activate_object(obj_EnemyPortal);
instance_activate_object(obj_DungeonDoor);
instance_activate_object(obj_PillarRiseShort);
instance_activate_object(obj_HealingFountain);
instance_activate_object(obj_ToggleBarrierOrb);
instance_activate_object(txt_Damage);
instance_activate_object(evt_Cutscene);

instance_activate_object(par_Beam);
instance_activate_object(obj_PlayerArrow);
instance_activate_object(obj_EnemyBullet);
instance_activate_object(obj_ProjectileExplosion);

instance_activate_object(obj_Waterfall);
instance_activate_object(obj_WorldWave);
instance_activate_object(obj_WorldSeaBubbles);
instance_activate_object(obj_Tenebrane_door);
instance_activate_object(obj_TenebraneSocket);
instance_activate_object(obj_Tenebrane);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw Bounding Box
if obj_GUI.Debug
{
    draw_set_alpha(0.5);
    draw_rectangle_colour(bbox_left, bbox_top, bbox_right, bbox_bottom, c_lime, c_lime, c_lime, c_lime, false);
    draw_set_alpha(1);
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Show Views
if obj_GUI.Debug
{
    draw_text_transformed_colour(50, 92, string(view_visible[0]) + "/" + string(view_visible[7]), 0.1625, 0.1625, 0, c_black, c_black, c_black, c_black, 1);
    draw_text_transformed_colour(98, 92, view_enabled, 0.1625, 0.1625, 0, c_black, c_black, c_black, c_black, 1);
    if obj_GUI.khShift
    {
        draw_text_transformed_colour(50, 108, view_wport[0], 0.1625, 0.1625, 0, c_black, c_black, c_black, c_black, 1);
        draw_text_transformed_colour(98, 108, view_hport[0], 0.1625, 0.1625, 0, c_black, c_black, c_black, c_black, 1);
        draw_text_transformed_colour(50, 124, view_xview[0], 0.1625, 0.1625, 0, c_black, c_black, c_black, c_black, 1);
        draw_text_transformed_colour(98, 124, view_yview[0], 0.1625, 0.1625, 0, c_black, c_black, c_black, c_black, 1);
        draw_text_transformed_colour(50, 140, object_get_name(target) + "/" + object_get_name(view_object[0]), 0.1625, 0.1625, 0, c_black, c_black, c_black, c_black, 1);
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
