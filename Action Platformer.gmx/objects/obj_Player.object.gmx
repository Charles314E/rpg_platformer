<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_PlaceholderPlayer</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>-1</persistent>
  <parentName>par_Entity</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///event_inherited()
event_inherited();
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Initialize Attributes
Weight = FrameModulus * 8;
selfFriction = FrameModulus * 0.5;
WalljumpDelay = FrameModulus * 1;
jSpeed = FrameModulus * 15;
mSpeed = FrameModulus * 4;
wSpeed = FrameModulus * 1;
sSpeed = FrameModulus * 2;
iSpeed = 0;
mMaxSpeed = FrameModulus * 10;
LungeDistance = FrameModulus * 1;
WallKickedOff = 0;
MaxJumps = 3;
Jumps = 0;
LungeDashing = false;
AfterimageAlpha = 0.8;
DashAlpha = 0;
Attacking = false;
Weapon = noone;
AttackNumber = 0;
AttackDuration = -1;
AttackGap = -1;
SwordComboAmount = 3;
AttackSprite = noone;
encounterChance = 0;
encounterThreshold = 120;
hdir = 0;
vdir = 0;
pdir = 0;
pcInit = true;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Initialize Variables
WallJumping = false;
LeftWallSliding = false;
RightWallSliding = false;
Invulnerable = false;
Dashing = false;
Attacking = false;
Walking = false;
CanJump = true;
CanInteract = true;
Falling = false;
depth = -3;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Initialize Statistics
statStrength = 10;
statVitality = 10;
statDexterity = 10;
statFortitude = 10;
statWisdom = 10;
statMagic = 10;

Level = 1;
EXP = 0;
EXPAcc = 0;
ToNextLevel = int64(LevelBase + (LevelMultiplier * power(1 + LevelExponent, Level)));
show_debug_message("[DBG]: " + string(LevelBase) + " + " + string(LevelMultiplier) + "(1 + " + string(LevelExponent) + ")^" + string(Level) + " = " + string(ToNextLevel));
show_debug_message("[DBG]: " + string(ToNextLevel) + " experience points to level " + string(Level + 1) + ".");
StatPoints = 0;
SkillPoints = 0;

statMaxStamina = 100;
statStamina = statMaxStamina;

set_statistics(self, true);
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Initialize VRI's
ds_list_add(Elements,
                    "FIRE", 1.2,
                    "ICE", 0.8,
                    "POISON", 0.25,
                    "DARKNESS", 0.5);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="6">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Recover From Fall
if statHealth &gt; 0
{
    Falling = false;
    x = obj_GUI.RoomStartX;
    y = obj_GUI.RoomStartY;
    Invulnerable = true;
    obj_GUI.Cutscene = false;
    alarm[1] = room_speed;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="5">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Break Your Legs
shake_camera(4, 0.9);
damage_player(floor(statMaxHealth * 0.3), noone, false);
alarm[6] = room_speed;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Recover Stamina
if statStamina &lt; statMaxStamina
{
    statStamina += statEndurance;
    alarm[4] = room_speed / 15;
}
else
{
    statStamina = statMaxStamina;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Stop Dashing
Dashing = false;
LungeDashing = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Collate Damage
with instance_create(x, y, txt_Damage)
{
    Damage = other.DamageStack;
    Origin = other;
}
DamageStack = 0;
DamageStacking = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Make Vulnerable
Invulnerable = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Stop Walljumping
WallJumping = false
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Initialize
if pcInit
{
    Sex = "Male";
    //apply_status("PARALYZE", self, 300);
    create_player_states();
    create_player_world_states();
    pcInit = false;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Refresh Statistics
set_statistics(self, false);

statHealth = max(0, min(statHealth, statMaxHealth));
statMana = max(0, min(statMana, statMaxMana));
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Set Battle Map
var tileCurrent, battleMapDone;
if instance_exists(obj_Controller)
{
    if obj_Controller.MapType = "World"
    {
        battleMapDone = false;
        encounterLevel = 0;
        inst = instance_place(x, y, obj_WorldFloor);
        if inst
        {
            encounterLevel = inst.encounterLevel;
        }
        for (bm = -3; bm &lt; 2; bm += 1)
        {
            if not battleMapDone
            {
                var bbox_width, bbox_height;
                bbox_width = bbox_right - bbox_left;
                bbox_height = bbox_bottom - bbox_top;
                tileCurrent = tile_layer_find(1000000 + bm, bbox_right - (bbox_width / 2), bbox_bottom - (bbox_height / 2));
                tileSheet = "";
                if (tileCurrent + 1)
                {
                    tileSheet = background_get_name(tile_get_background(tileCurrent));
                    obj_Controller.BattleMap = set_battle_map(tileSheet, encounterLevel);
                    battleMapDone = true;
                    n = 1000000 + bm;
                }
                else
                {
                    obj_Controller.BattleMap = set_battle_map_default(encounterLevel);
                    n = 1000002;
                }
            }
        }
    }
    else
    {
        tileSheet = "";
        n = 1000002;
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Wall Sliding
LeftWallSliding = LeftWallCheck and obj_GUI.khShift
RightWallSliding = RightWallCheck and obj_GUI.khShift

if obj_GUI.krShift
{
    if LeftWallSliding
    {
        dir = 1;
    }
    else if RightWallSliding
    {
        dir = -1;
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Movement
if instance_exists(obj_Controller)
{
    if not (obj_GUI.GameFrozen or obj_GUI.Cutscene or (status("PARALYZE") + 1))
    {
        if obj_Controller.MapType = "Platform"
        {
            dSpeed = sign(hSpeed) * selfFriction;
            if not obj_GUI.GameFrozen
            {
                if not Attacking
                {
                    iSpeed -= sign(iSpeed) * selfFriction;
                    if obj_GUI.khLeft or obj_GUI.khRight
                    {
                        if !LeftWallSliding and !RightWallSliding
                        {
                            dir = -obj_GUI.khLeft + obj_GUI.khRight;
                            if not place_meeting(x+dir, y, obj_Block) or place_meeting(x+dir, y, obj_SlopeTL)
                            {
                                hSpeed = (dir * mSpeed) + iSpeed;
                                var inst;
                                inst = instance_place(x+dir, y, par_PushableObject);
                                if inst
                                {
                                    if inst.Pushable
                                    {
                                        hSpeed = hSpeed / 2;
                                        inst.hSpeed = hSpeed;
                                    }
                                }
                                if Attacking
                                {
                                    hSpeed = dir * (mSpeed * (LungeDistance + (LungeOffset * TileDimensions)));
                                }
                            }
                        }
                        Walking = false;
                        if OnGround
                        {
                            Walking = true;
                        }
                    }
                    else
                    {
                        Walking = false;
                        hSpeed = hSpeed + iSpeed;
                    }
                }
                
                if LeftWallSliding or RightWallSliding
                {
                    if not place_meeting(x+dir, y, obj_Block)
                    {
                        xx = dir * 4;
                        while place_meeting(x+xx, y, obj_Block) and abs(xx) &gt; 0
                        {
                            xx -= dir;
                        }
                        x += xx;
                    }
                }
                
                if LungeDashing
                {
                    if DashAlpha &lt; AfterimageAlpha
                    {
                        DashAlpha += 0.05;
                        with instance_create(x, y, chd_Afterimage)
                        {
                            sprite_index = other.sprite_index;
                            image_index = other.image_index;
                            image_speed = 0;
                            image_alpha = other.DashAlpha;
                            image_xscale = -1 * other.dir;
                        }
                    }
                }
                hSpeed = min(max(hSpeed, -mMaxSpeed), mMaxSpeed);
                
                if abs(hSpeed) &gt; 0
                {
                    hSpeed -= dSpeed;
                }
                if abs(hSpeed) &lt;= 0.15 and abs(iSpeed) = 0
                {
                    hSpeed = 0;
                }
            }
        }
        else if obj_Controller.MapType = "World"
        {
            hdir = -obj_GUI.khLeft + obj_GUI.khRight;
            vdir = -obj_GUI.khUp + obj_GUI.khDown;
            if obj_GUI.khLeft or obj_GUI.khRight
            {
                pdir = -obj_GUI.khLeft + obj_GUI.khRight;
            }
            hSpeed = hdir * wSpeed;
            vSpeed = vdir * wSpeed;
            if not place_meeting(x+sign(hSpeed), y, obj_WorldFloor) or place_meeting(x+sign(hSpeed), y, obj_Block) 
            {
                hSpeed = 0;
            }
            if not place_meeting(x, y+sign(vSpeed), obj_WorldFloor) or place_meeting(x, y+sign(vSpeed), obj_Block)
            {
                vSpeed = 0;
            }
            if hSpeed != 0 or vSpeed != 0
            {
                encounterChance = round(random_range(1, encounterThreshold));
                if encounterChance = encounterThreshold
                {
                    fieldX = x;
                    fieldY = y;
                    FieldMap = room;
                    Encounter = "Random";
                    room_transition(obj_Controller.BattleMap, "Platform", 64, 146, tsn_Battle, 0.5, 90);
                }
            }
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///event_inherited()
event_inherited();
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Jumping
if (instance_exists(obj_Controller)) {
    if (not (obj_GUI.GameFrozen or obj_GUI.Cutscene or (status("PARALYZE") + 1) or (Attacking and obj_WeaponSwitcher.Weapon != 6)) and obj_Controller.MapType == "Platform") {
        //Normal Jumping
        if (OnGround) {
            Jumps = 0;
        }
        CanJump = true;
        var instBlockDown = instance_place(x, bbox_bottom + 1, obj_Elevator);
        if (instBlockDown != noone) {
            if (instBlockDown.object_index == obj_Elevator) {
                if (instBlockDown.Floor &lt; instBlockDown.HighestFloor and instBlockDown.CanInteract) {
                    CanJump = false;
                }
            }
        }
        if (obj_GUI.kpJump and CanJump) {
            if (OnGround or Jumps &lt; MaxJumps) {
                vSpeed = -jSpeed * power(0.75, Jumps);
                for (var i = 0; i &lt; 6 * power(0.75, Jumps); i += 1) {
                    part_particles_create(obj_Particles.partSystem, x + random_range(-sprite_xoffset * 1.2, sprite_width - sprite_xoffset * 1.2), bbox_bottom - min(1, Jumps) * 8, obj_Particles.partDustSettlingSmall, 1);
                }
                if (OnGround) {
                    part_particles_create(obj_Particles.partSystem, x - sprite_xoffset * 1.3, bbox_bottom, obj_Particles.partDustKickedSmall, 1);
                    part_particles_create(obj_Particles.partSystem, x + sprite_width - sprite_xoffset * 1.3, bbox_bottom, obj_Particles.partDustKickedSmall, 1);
                }
                Jumps += 1;
            }
        }
        
        //Walljumping
        if (obj_WeaponSwitcher.Weapon = 5 and is_string(ds_list_find_value(obj_WeaponSwitcher.WeaponsList, 5))) {
            //Left-wall
            if (LeftWallSliding and not RightWallSliding and ((obj_GUI.kpJump and obj_GUI.khRight) or (obj_GUI.khJump and obj_GUI.kpRight))) {
                WallKickedOff = 3;
                WallJumping = true;
                vSpeed = -jSpeed * 1.1;
                hSpeed = mSpeed * 3.5;
                LeftWallCheck = false;
            }
            //Right-wall
            if (RightWallSliding and not LeftWallSliding and ((obj_GUI.kpJump and obj_GUI.khLeft) or (obj_GUI.khJump and obj_GUI.kpLeft))) {
                WallKickedOff = 3;
                WallJumping = true;
                vSpeed = -jSpeed * 1.1;
                hSpeed = -mSpeed * 3.5;
                RightWallCheck = false;
            }
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Restart Game
if obj_GUI.Debug
{
    if obj_GUI.kpRestart
    {
        game_reset();
    }
}

if bbox_top &gt; room_height
{
    if not (obj_GUI.RoomStartX = 0 and obj_GUI.RoomStartY = 0)
    {
        if not Falling
        {
            Falling = true;
            obj_GUI.Cutscene = true;
            hSpeed = 0;
            alarm[5] = room_speed * 3;
        }
    }
    else
    {
        game_reset();
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Change Character Position
if not obj_GUI.GameFrozen
{
    x += hSpeed;
    y += vSpeed;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Set States
if (not obj_GUI.GameFrozen) {
    set_player_states();
}
if (instance_exists(obj_Controller)) {
    if (obj_Controller.MapType == "Platform") {
        image_xscale = 1;
        image_yscale = 1;
    }
    else if (obj_Controller.MapType == "World") {
        image_xscale = worldMapScale;
        image_yscale = worldMapScale;
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Cooldown Attacks
if (AttackGap + 1)
{
    AttackGap -= 1;
}
else
{
    AttackNumber = 0;
    AttackGap = -1;
}

if (AttackDuration + 1)
{
    AttackDuration -= 1;
}
else
{
    Attacking = false;
    AttackDuration = -1;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Freeze Animations
if obj_GUI.GameFrozen
{
    image_speed = 0;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Attacking
if instance_exists(obj_Controller)
{
    if not (obj_GUI.GameFrozen or obj_GUI.Cutscene or (status("PARALYZE") + 1)) and obj_Controller.MapType = "Platform"
    {
        if not (LeftWallSliding or RightWallSliding)
        {
            if obj_GUI.kpAttack
            {
                if is_string(ds_list_find_value(obj_WeaponSwitcher.WeaponsList, obj_WeaponSwitcher.Weapon))
                {
                    if not Attacking
                    {
                        image_index = 0;
                        Attacking = true;
                        AttackDuration = 20;
                        Weapon = noone;
                        LungeOffset = 0;
                        StunDuration = 0;
                        LungeDashing = false;
                        DashAlpha = 0;
                        StaminaCost = 0;
                        switch obj_WeaponSwitcher.Weapon
                        {
                            case 0:
                                    if AttackNumber &lt; SwordComboAmount
                                    {
                                        AttackNumber += 1;
                                        AttackGap = room_speed / 2;
                                    }
                                    Weapon = htb_Sword;
                                    CreationOffset = 12;
                                    LungeOffset = 0.02;
                                    if AttackNumber = 3
                                    {
                                        LungeOffset = 0.06;
                                    }
                                    JumpOffset = 0;
                                    StunDuration = 0.3;
                                    StaminaCost = 20;
                                    break;
                            case 1:
                                    Weapon = htb_Axe;
                                    CreationOffset = 12;
                                    LungeOffset = 0;
                                    JumpOffset = 0;
                                    StunDuration = 0.3;
                                    StaminaCost = 20;
                                    break;
                            case 2:
                                    Weapon = htb_Greatsword;
                                    AttackDuration = 60;
                                    CreationOffset = 12;
                                    LungeOffset = 0;
                                    JumpOffset = 0;
                                    StunDuration = 0.3;
                                    StaminaCost = 50;
                                    break;
                            case 3:
                                    Weapon = htb_Melee;
                                    CreationOffset = 12;
                                    LungeOffset = 0.5;
                                    JumpOffset = 0;
                                    StunDuration = 0.3;
                                    StaminaCost = 0;
                                    break;
                            case 4:
                                    Weapon = htb_Bow;
                                    CreationOffset = 10;
                                    LungeOffset = -LungeDistance / TileDimensions;
                                    JumpOffset = 0;
                                    StunDuration = 0.1;
                                    StaminaCost = 0;
                                    break;
                            case 5:
                                    Weapon = htb_Claws;
                                    CreationOffset = 12;
                                    LungeOffset = 0.25;
                                    JumpOffset = 0.5;
                                    StunDuration = 0.5;
                                    StaminaCost = 10;
                                    break;
                            case 6:
                                    Weapon = htb_Melee;
                                    CreationOffset = 12;
                                    LungeOffset = 0;
                                    JumpOffset = 0;
                                    StunDuration = 0.3;
                                    StaminaCost = 0;
                                    break;
                            case 7:
                                    Weapon = htb_Scythe;
                                    AttackDuration = 60;
                                    CreationOffset = 16;
                                    LungeOffset = 0.005;
                                    JumpOffset = 0;
                                    StunDuration = 0.3;
                                    StaminaCost = 35;
                                    break;
                            case 8:
                                    Weapon = htb_Shield;
                                    CreationOffset = 12;
                                    LungeOffset = -LungeDistance / TileDimensions;
                                    JumpOffset = 0;
                                    StunDuration = 1 / room_speed;
                                    LungeDashing = true;
                                    StaminaCost = 0;
                                    break;
                            case 9:
                                    Weapon = obj_WeaponSwitcher.CurrentWeapon;
                                    CreationOffset = 10;
                                    LungeOffset = -LungeDistance / TileDimensions;
                                    JumpOffset = 0;
                                    StunDuration = 0.1;
                                    StaminaCost = 0;
                                    break;
                        }
                        if Weapon != noone and statStamina &gt;= StaminaCost
                        {
                            if instance_exists(Weapon)
                            {
                                Attacking = false;
                            }
                            else
                            {
                                if (Weapon != htb_Claws or (Weapon = htb_Claws and OnGround)) and Weapon != htb_Axe
                                {
                                    if Weapon = htb_Claws
                                    {
                                        LungeDashing = true;
                                        Jumps += 1;
                                    }
                                    DashAlpha = 0;
                                    statStamina -= StaminaCost;
                                    obj_GUI.alarm[2] = room_speed * 0.2;
                                    alarm[4] = room_speed * 0.5;
                                    instance_create(x+(dir*CreationOffset), y, Weapon);
                                    hSpeed += dir * (mSpeed * (LungeDistance + (LungeOffset * TileDimensions)));
                                    vSpeed -= JumpOffset * jSpeed;
                                }
                                else if Weapon != htb_Axe
                                {
                                    Attacking = false;
                                }
                            }
                        }
                        else
                        {
                            Attacking = false;
                        }
                    }
                }
            }
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_Block">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Collide with Block
if place_meeting(x, y+1, obj_Block)
{
    G = 0;
    vSpeed = 0;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="7">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///End Attack
if Attacking
{
    Attacking = false;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///event_inherited()
event_inherited();
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw Information
if obj_GUI.Debug
{
    draw_text_transformed_colour(2, 60, dir, 0.1625, 0.1625, 0, c_black, c_black, c_black, c_black, 1);    
    draw_text_transformed_colour(50, 60, obj_GUI.RoomStartX, 0.1625, 0.1625, 0, c_black, c_black, c_black, c_black, 1);
    draw_text_transformed_colour(98, 60, obj_GUI.RoomStartY, 0.1625, 0.1625, 0, c_black, c_black, c_black, c_black, 1);
    draw_text_transformed_colour(2, 76, floor(image_index), 0.1625, 0.1625, 0, c_black, c_black, c_black, c_black, 1);
    draw_text_transformed_colour(50, 76, AttackDuration, 0.1625, 0.1625, 0, c_black, c_black, c_black, c_black, 1);
    //draw_text_transformed_colour(98, 76, Attacking, 0.1625, 0.1625, 0, c_black, c_black, c_black, c_black, 1);
    draw_text_transformed_colour(98, 76, instance_number(object_index), 0.1625, 0.1625, 0, c_black, c_black, c_black, c_black, 1);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Set Alpha
if instance_exists(obj_Controller)
{
    if obj_Controller.MapType = "World"
    {
        switch tileSheet
        {
            case "ts_WorldForest": image_alpha = 0.5; break;
            case "ts_WorldMountains": image_alpha = 0.5; break;
            default: image_alpha = 1; break;
        }
    }
    else
    {
        image_alpha = 1;
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///event_inherited()
event_inherited();
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw Weapon Attacks
if AttackSprite != noone
{
    draw_sprite(AttackSprite, image_index, x, y);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="81">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Shield Bash
if instance_exists(obj_Controller)
{
    if not (obj_GUI.GameFrozen or obj_GUI.Cutscene) and obj_Controller.MapType = "Platform"
    {
        if obj_WeaponSwitcher.Weapon = 8
        {
            if obj_GUI.khShift
            {
                with instance_create(x+(dir*12), y, htb_Shield)
                {
                    SheatheSpeed = room_speed;
                }
                LungeDashing = true;
                hSpeed = dir * (mSpeed * 2.5)
            }
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
