<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_Controller</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>par_HUDObject</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Initialize Variables
MapType = "World";
Encounter = "Field";
fractionSpeed = 0.05;
FieldMap = noone;
BattleMap = noone;
Cutscene = noone;
InArena = false;
TimeStart = get_timer() * 1000;
Time = 0;
wView = 0;
hView = 0;
init = false;
initN = 0;
cutsceneOrigin = noone;
showingResults = false;
ww = 36;
wh = 28;
wx = (view_wport[view_current] / 2) - (ww * 8);
wy = (view_hport[view_current] / 2) - (wh * 8);
lx = 320;
ly = 64;
gainedExperience = false;
LevelUpSubimage = 0;
LevelUpHeight = 0.5;
LevelUpY = 0;
resultsAlpha = -1;
alphaThreshold = 3;
canLevelUp = false;
MapRooms = noone;
alarm[0] = room_speed * 0.1;
Won = false;

defaultElevatorLocation = ds_list_create();
ds_list_add(defaultElevatorLocation, 0, 0);

Switches = ds_list_create();
for (i = 0; i &lt; 99; i += 1)
{
    ds_list_add(Switches, false);
}
Variables = ds_list_create();
for (i = 0; i &lt; 99; i += 1)
{
    ds_list_add(Variables, 0);
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Initialize Weather
Weather = noone;
fog1 = 0;
fog2 = 0;
fogXScale = 1;
fogYScale = 1;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Calculate Gold and Experience
expLoot = 0;
goldLoot = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Create Sea Bubbles
if MapType = "World"
{
    var chance, xx, yy;
    chance = round(random_range(1, 5));
    if chance = 5
    {
        td = TileDimensions * 2;
        xx = floor(random_range(0, room_width) / 32) * td;
        yy = floor(random_range(0, room_width) / 32) * td;
        instance_create(xx, yy, obj_WorldSeaBubbles);
    }
    else if chance &gt;= 3
    {
        td = TileDimensions;
        xx = floor(random_range(0, room_width) / 16) * td;
        yy = floor(random_range(0, room_width) / 16) * td;
        instance_create(xx, yy, obj_WorldWave);
    }
}
alarm[0] = room_speed * 0.1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Calculate Result Box Coordinates
wx = (view_wport[view_current] / 2) - (ww * 8);
wy = (view_hport[view_current] / 2) - (wh * 8);
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Calculate Experience, Gold and Drops
if Encounter = "Random" and not init
{
    init = true;
    for (i = 0; i &lt; instance_count; i += 1)
    {
        if object_is_ancestor(instance_id[i].object_index, obj_Enemy)
        {
            expLoot += instance_id[i].lootExp;
            goldLoot += instance_id[i].lootGold;
        }
    }
    lootDrops = ds_list_create();
    with obj_Enemy
    {
        calculate_item_drop(lootDrops);
    }
    with par_Item
    {
        show_debug_message("[DBG]: " + object_get_name(object_index));
        if ds_list_find_index(other.lootDrops, item) != -1
        {
            var itemIndex, itemNumber;
            itemIndex = ds_list_find_index(other.lootDrops, item);
            itemNumber = ds_list_find_value(other.lootDrops, itemIndex + 1);
            ds_list_replace(other.lootDrops, itemIndex + 1, itemNumber + 1);
        }
        else
        {
            ds_list_add(other.lootDrops, item, 1);
        }
        instance_destroy();
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Check Random Encounter Level Up
if (Encounter == "Random" and not init) {
    if (((obj_Player.EXP + expLoot) &gt;= obj_Player.ToNextLevel)) {
        canLevelUp = true;
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Increase Time
Time = (get_timer() * 1000) - TimeStart;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Pan Towards Player
if (instance_exists(obj_Player)) {
    hSpeed = (obj_Player.x - x) * fractionSpeed;
    vSpeed = (obj_Player.y - y) * fractionSpeed;
    x += hSpeed;
    y += vSpeed;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Check Encounter Win
if (not Won) {
    gainedExperience = false;
    if (Encounter == "Random") {
        if (instance_number(obj_Enemy) &lt; 1) {
            obj_GUI.GameFrozen = true;
            showingResults = true;
            Won = true;
        }
    }
    else if (Encounter == "Arena") {
        if (InArena) {
            if (instance_number(obj_Enemy) &lt; 1 and instance_number(obj_EnemyPortal) &lt; 1) {
                cutscene_start(self, Cutscene);
                Won = true;
                InArena = false;
            }
        }
    }
}
else {
    if (Encounter == "Random") {
        if (not gainedExperience) {
            if (resultsAlpha &gt;= alphaThreshold) {
                gain_experience(noone, expLoot);
                gainedExperience = true;
            }
        }
        else if (obj_GUI.kpAttack) {
            obj_GUI.goldSubimage = 0;
            obj_GUI.Gold += goldLoot;
            for (var i = 0; i &lt; (ds_list_size(lootDrops) / 2); i += 1) {
                var itemName, itemNumber;
                itemName = ds_list_find_value(lootDrops, (i * 2));
                itemNumber = ds_list_find_value(lootDrops, (i * 2) + 1);
                inventory_add(obj_Inventory.InventoryList, itemName, itemNumber);
            }
            room_transition(FieldMap, "Field", obj_Player.fieldX + 6, obj_Player.fieldY, tsn_FadeBlack, 0.5, 180);
            showingResults = false;
            obj_GUI.GameFrozen = false;
        }
        Attacking = false;
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Alter Weather Overlay
if (Weather != noone) {
    fog1 += fogXScale;
    fog2 += fogYScale;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Fade In Results
if (showingResults) {
    if (resultsAlpha &lt; alphaThreshold) {
        resultsAlpha += 0.1;
    }
    else {
        if (LevelUpSubimage &lt; 11) {
            LevelUpSubimage += 1;
        }
    }
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw Information
if instance_exists(obj_GUI)
{
    if obj_GUI.Debug
    {
        draw_text_transformed_colour(2, 156, Encounter, 0.1625, 0.1625, 0, c_black, c_black, c_black, c_black, 1);
        draw_text_transformed_colour(146, 156, MapType, 0.1625, 0.1625, 0, c_black, c_black, c_black, c_black, 1);
        draw_text_transformed_colour(2, 172, obj_Player.encounterChance, 0.1625, 0.1625, 0, c_black, c_black, c_black, c_black, 1);
        draw_text_transformed_colour(50, 172, instance_number(obj_Enemy), 0.1625, 0.1625, 0, c_black, c_black, c_black, c_black, 1);
        if MapType = "World"
        {
            draw_text_transformed_colour(50, 188, obj_Player.tileSheet, 0.1625, 0.1625, 0, c_black, c_black, c_black, c_black, 1);
            draw_text_transformed_colour(146, 188, obj_Player.n, 0.1625, 0.1625, 0, c_black, c_black, c_black, c_black, 1);
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw Weather
if Weather != noone
{
    switch Weather
    {
        case "Fog": draw_set_alpha(0.5);
                    draw_rectangle_colour(0, 0, view_wport, view_hport, c_black, c_black, c_black, c_black, false);
                    draw_sprite_tiled_ext(spr_Fog, 0, fog1, fog2, 1, 1, c_white, 0.25);
                    draw_sprite_tiled_ext(spr_Fog, 0, fog1 * 2, fog2 * 2, 1, 1, c_white, 0.125);
                    break;
        case "Light Fog": draw_set_alpha(0.25);
                    draw_rectangle_colour(0, 0, view_wport, view_hport, c_black, c_black, c_black, c_black, false);
                    draw_sprite_tiled_ext(spr_Fog, 0, fog1 * 0.5, fog2 * 0.5, 1, 1, c_white, 0.125);
                    draw_sprite_tiled_ext(spr_Fog, 0, fog1, fog2, 1, 1, c_white, 0.0625);
                    break;
    }
}
draw_set_alpha(1);
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw Random Encounter Win
if showingResults
{
    create_message_box("", sht_Box, ww, wh, noone, max(0, resultsAlpha), wx, wy);
    draw_set_font(fnt_TitleFont);
    draw_set_halign(fa_center);
    draw_set_valign(fa_bottom);
    draw_text_transformed_colour(view_wport[view_current] / 2, wy + 72, "Encounter Won!", 0.5, 0.5, 0, c_white, c_white, c_white, c_white, max(0, resultsAlpha));
    draw_set_halign(fa_left);
    draw_set_valign(fa_top);
    
    draw_line_colour(wx + 16, wy + 64, (wx + (ww * 16)) - 16, wy + 64, c_white, c_white);
    
    draw_text_transformed_colour(wx + 32, wy + 80, "EXP", 0.1625, 0.1625, 0, c_white, c_white, c_white, c_white, max(0, resultsAlpha));
    draw_text_transformed_colour(wx + 128, wy + 80, expLoot, 0.1625, 0.1625, 0, c_white, c_white, c_white, c_white, max(0, resultsAlpha));
    
    draw_text_transformed_colour(wx + 32, wy + 96, "Gold", 0.1625, 0.1625, 0, c_white, c_white, c_white, c_white, max(0, resultsAlpha));
    draw_text_transformed_colour(wx + 128, wy + 96, goldLoot, 0.1625, 0.1625, 0, c_white, c_white, c_white, c_white, max(0, resultsAlpha));
    
    /*if resultsAlpha = 1
    {
        if ((obj_Player.EXP + expLoot) &gt;= obj_Player.ToNextLevel)
        {
            draw_text_transformed_colour(wx + 256, wy + 80, "Level up!", 0.1625, 0.1625, 0, c_lime, c_lime, c_lime, c_lime, LevelUpSubimage / 11);
            if LevelUpSubimage &lt;= 11
            {
                draw_sprite(ani_LevelUpText, LevelUpSubimage, wx + 256, wy + 80);
            }
        }
    }*/
    
    draw_line_colour(wx + 16, wy + 128, (wx + (ww * 16)) - 16, wy + 128, c_white, c_white);
    
    for (var i = 0; i &lt; (ds_list_size(lootDrops) / 2); i += 1)
    {
        item = ds_list_find_value(lootDrops, i * 2);
        number = ds_list_find_value(lootDrops, (i * 2) + 1);
        ii = ds_list_find_index(obj_Inventory.dbItems, item);
        if ii != -1
        {
            itemSprite = ds_list_find_value(obj_Inventory.dbItems, ii + 1);
            itemSubimage = ds_list_find_value(obj_Inventory.dbItems, ii + 2);
        }
        else
        {
            ii = ds_list_find_index(obj_Inventory.dbWeapons, item);
            if ii != -1
            {
                itemSprite = ds_list_find_value(obj_Inventory.dbWeapons, ii + 1);
                itemSubimage = ds_list_find_value(obj_Inventory.dbWeapons, ii + 2);
            }
        }
        draw_set_alpha(max(0, resultsAlpha));
        draw_sprite(itemSprite, itemSubimage, wx + 32, wy + (i * 16) + 144);
        draw_set_alpha(1);
        draw_text_transformed_colour(wx + 64, wy + (i * 16) + 144, item, 0.1625, 0.1625, 0, c_white, c_white, c_white, c_white, max(0, resultsAlpha));
        draw_text_transformed_colour(wx + 360, wy + (i * 16) + 144, number, 0.1625, 0.1625, 0, c_white, c_white, c_white, c_white, max(0, resultsAlpha));
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
