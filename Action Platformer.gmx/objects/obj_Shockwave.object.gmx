<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-1000000</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Set View Scale
vw = view_wview[view_current] / view_wport[view_current];
vh = view_hview[view_current] / view_hport[view_current];
show_debug_message("[DBG]: Surface Scale = (" + string(vw) + ", " + string(vh) + ")");
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Create Surface
waveHeight = TileDimensions;
waveWidth = TileDimensions;
waveSurface = surface_create(waveWidth / vw, waveHeight * (2 / vh));
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Set View Scale
vw = view_wview[view_current] / view_wport[view_current];
vh = view_hview[view_current] / view_hport[view_current];
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Set Surface
if surface_exists(waveSurface)
{
    var wx, wy, ww, wh, vc;
    wx = (x - view_xview[view_current]) / view_wview[view_current] * view_wport[view_current];
    wy = (y + waveHeight - view_yview[view_current]) / view_hview[view_current] * view_hport[view_current];
    ww = waveWidth / view_wview[view_current] * view_wport[view_current];
    wh = waveHeight / view_hview[view_current] * view_hport[view_current];
    surface_copy_part(waveSurface, 0, surface_get_height(waveSurface) / 2, application_surface, wx, wy, ww / vw, wh / vh);
}
else
{
    waveSurface = surface_create(waveWidth / vw, waveHeight * (2 / vh));
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw Wave
if surface_exists(waveSurface)
{
    for (i = 0; i &lt; waveWidth; i += 1)
    {
        shader_set(shd_Wave);
        ww = shader_get_uniform(shd_Wave, "u_fWaveWidth");
        wh = shader_get_uniform(shd_Wave, "u_fWaveHeight");
        shader_set_uniform_f(ww, waveWidth);
        shader_set_uniform_f(wh, waveHeight);
        draw_surface_part_ext(waveSurface, i / vw, 0, 1, surface_get_height(waveSurface), x + i, y - TileDimensions + 2, 1, vh, c_white, 1);
        shader_reset();
    }
}
else
{
    waveSurface = surface_create(waveWidth / vw, waveHeight * (2 / vh));
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
